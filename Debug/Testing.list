
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000000c  080067ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080067ec  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116f1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002841  00000000  00000000  00031726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00033f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020173  00000000  00000000  00035c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001296d  00000000  00000000  00055dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8e14  00000000  00000000  00068730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  00121594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08006760 	.word	0x08006760

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08006760 	.word	0x08006760

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <search_thruster_by_address>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

thruster_t thrusters[THRUSTERS_NUM];

int search_thruster_by_address(uint8_t address){
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
    for(int i = 0; i < THRUSTERS_NUM; i++){
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00f      	b.n	800055c <search_thruster_by_address+0x30>
        if(thrusters[i].address == address){
 800053c:	490b      	ldr	r1, [pc, #44]	; (800056c <search_thruster_by_address+0x40>)
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	4413      	add	r3, r2
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	440b      	add	r3, r1
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	79fa      	ldrb	r2, [r7, #7]
 800054e:	429a      	cmp	r2, r3
 8000550:	d101      	bne.n	8000556 <search_thruster_by_address+0x2a>
            return i;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	e005      	b.n	8000562 <search_thruster_by_address+0x36>
    for(int i = 0; i < THRUSTERS_NUM; i++){
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3301      	adds	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2b07      	cmp	r3, #7
 8000560:	ddec      	ble.n	800053c <search_thruster_by_address+0x10>
        }
    }
}
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000028 	.word	0x20000028

08000570 <set_thruster_velocity>:

void set_thruster_velocity(uint8_t address, uint16_t velocity){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]
    int thruster_num = search_thruster_by_address(address);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffd2 	bl	800052c <search_thruster_by_address>
 8000588:	60f8      	str	r0, [r7, #12]
    thrusters[thruster_num].velocity = velocity;
 800058a:	490c      	ldr	r1, [pc, #48]	; (80005bc <set_thruster_velocity+0x4c>)
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	330c      	adds	r3, #12
 800059a:	88ba      	ldrh	r2, [r7, #4]
 800059c:	801a      	strh	r2, [r3, #0]
    thrusters[thruster_num].need_update = true;
 800059e:	4907      	ldr	r1, [pc, #28]	; (80005bc <set_thruster_velocity+0x4c>)
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	440b      	add	r3, r1
 80005ac:	3317      	adds	r3, #23
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028

080005c0 <thrusters_update>:

void thrusters_update(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
    for(int i = 0; i < THRUSTERS_NUM; i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	e1db      	b.n	8000984 <thrusters_update+0x3c4>
        if(thrusters[i].need_update){
 80005cc:	49ab      	ldr	r1, [pc, #684]	; (800087c <thrusters_update+0x2bc>)
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	440b      	add	r3, r1
 80005da:	3317      	adds	r3, #23
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	f000 81cd 	beq.w	800097e <thrusters_update+0x3be>
        	if((thrusters[i].velocity>THRUSTER_PWM_MIN)&&(thrusters[i].velocity<THRUSTER_PWM_MAX))
 80005e4:	49a5      	ldr	r1, [pc, #660]	; (800087c <thrusters_update+0x2bc>)
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	440b      	add	r3, r1
 80005f2:	330c      	adds	r3, #12
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80005fa:	f240 810d 	bls.w	8000818 <thrusters_update+0x258>
 80005fe:	499f      	ldr	r1, [pc, #636]	; (800087c <thrusters_update+0x2bc>)
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	440b      	add	r3, r1
 800060c:	330c      	adds	r3, #12
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000614:	f080 8100 	bcs.w	8000818 <thrusters_update+0x258>
        	{
            __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, thrusters[i].velocity);
 8000618:	4998      	ldr	r1, [pc, #608]	; (800087c <thrusters_update+0x2bc>)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4613      	mov	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	440b      	add	r3, r1
 8000626:	3308      	adds	r3, #8
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d115      	bne.n	800065a <thrusters_update+0x9a>
 800062e:	4993      	ldr	r1, [pc, #588]	; (800087c <thrusters_update+0x2bc>)
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4613      	mov	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	440b      	add	r3, r1
 800063c:	330c      	adds	r3, #12
 800063e:	8818      	ldrh	r0, [r3, #0]
 8000640:	498e      	ldr	r1, [pc, #568]	; (800087c <thrusters_update+0x2bc>)
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	440b      	add	r3, r1
 800064e:	3304      	adds	r3, #4
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4602      	mov	r2, r0
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
 8000658:	e056      	b.n	8000708 <thrusters_update+0x148>
 800065a:	4988      	ldr	r1, [pc, #544]	; (800087c <thrusters_update+0x2bc>)
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4613      	mov	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	440b      	add	r3, r1
 8000668:	3308      	adds	r3, #8
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d115      	bne.n	800069c <thrusters_update+0xdc>
 8000670:	4982      	ldr	r1, [pc, #520]	; (800087c <thrusters_update+0x2bc>)
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	440b      	add	r3, r1
 800067e:	330c      	adds	r3, #12
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	497e      	ldr	r1, [pc, #504]	; (800087c <thrusters_update+0x2bc>)
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	440b      	add	r3, r1
 8000690:	3304      	adds	r3, #4
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4603      	mov	r3, r0
 8000698:	6393      	str	r3, [r2, #56]	; 0x38
 800069a:	e035      	b.n	8000708 <thrusters_update+0x148>
 800069c:	4977      	ldr	r1, [pc, #476]	; (800087c <thrusters_update+0x2bc>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	440b      	add	r3, r1
 80006aa:	3308      	adds	r3, #8
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b08      	cmp	r3, #8
 80006b0:	d115      	bne.n	80006de <thrusters_update+0x11e>
 80006b2:	4972      	ldr	r1, [pc, #456]	; (800087c <thrusters_update+0x2bc>)
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	330c      	adds	r3, #12
 80006c2:	8818      	ldrh	r0, [r3, #0]
 80006c4:	496d      	ldr	r1, [pc, #436]	; (800087c <thrusters_update+0x2bc>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	440b      	add	r3, r1
 80006d2:	3304      	adds	r3, #4
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4603      	mov	r3, r0
 80006da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006dc:	e014      	b.n	8000708 <thrusters_update+0x148>
 80006de:	4967      	ldr	r1, [pc, #412]	; (800087c <thrusters_update+0x2bc>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	440b      	add	r3, r1
 80006ec:	330c      	adds	r3, #12
 80006ee:	8818      	ldrh	r0, [r3, #0]
 80006f0:	4962      	ldr	r1, [pc, #392]	; (800087c <thrusters_update+0x2bc>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	440b      	add	r3, r1
 80006fe:	3304      	adds	r3, #4
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4603      	mov	r3, r0
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
        	if((HAL_GPIO_ReadPin(thrusters[i].port, thrusters[i].pin)==GPIO_PIN_RESET))
 8000708:	495c      	ldr	r1, [pc, #368]	; (800087c <thrusters_update+0x2bc>)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	3310      	adds	r3, #16
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	4958      	ldr	r1, [pc, #352]	; (800087c <thrusters_update+0x2bc>)
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	440b      	add	r3, r1
 8000728:	3314      	adds	r3, #20
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f003 f999 	bl	8003a64 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	f040 80f7 	bne.w	8000928 <thrusters_update+0x368>
        	{
          	  HAL_GPIO_WritePin(thrusters[i].port, thrusters[i].pin, GPIO_PIN_SET);
 800073a:	4950      	ldr	r1, [pc, #320]	; (800087c <thrusters_update+0x2bc>)
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	440b      	add	r3, r1
 8000748:	3310      	adds	r3, #16
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	494b      	ldr	r1, [pc, #300]	; (800087c <thrusters_update+0x2bc>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	440b      	add	r3, r1
 800075a:	3314      	adds	r3, #20
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	f003 f996 	bl	8003a92 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, THRUSTER_PWM_NEUTRAL);
 8000766:	4945      	ldr	r1, [pc, #276]	; (800087c <thrusters_update+0x2bc>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3308      	adds	r3, #8
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10d      	bne.n	8000798 <thrusters_update+0x1d8>
 800077c:	493f      	ldr	r1, [pc, #252]	; (800087c <thrusters_update+0x2bc>)
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3304      	adds	r3, #4
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
        	if((HAL_GPIO_ReadPin(thrusters[i].port, thrusters[i].pin)==GPIO_PIN_RESET))
 8000796:	e0c7      	b.n	8000928 <thrusters_update+0x368>
              __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, THRUSTER_PWM_NEUTRAL);
 8000798:	4938      	ldr	r1, [pc, #224]	; (800087c <thrusters_update+0x2bc>)
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	3308      	adds	r3, #8
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d10d      	bne.n	80007ca <thrusters_update+0x20a>
 80007ae:	4933      	ldr	r1, [pc, #204]	; (800087c <thrusters_update+0x2bc>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	440b      	add	r3, r1
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80007c6:	6393      	str	r3, [r2, #56]	; 0x38
        	if((HAL_GPIO_ReadPin(thrusters[i].port, thrusters[i].pin)==GPIO_PIN_RESET))
 80007c8:	e0ae      	b.n	8000928 <thrusters_update+0x368>
              __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, THRUSTER_PWM_NEUTRAL);
 80007ca:	492c      	ldr	r1, [pc, #176]	; (800087c <thrusters_update+0x2bc>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	440b      	add	r3, r1
 80007d8:	3308      	adds	r3, #8
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d10d      	bne.n	80007fc <thrusters_update+0x23c>
 80007e0:	4926      	ldr	r1, [pc, #152]	; (800087c <thrusters_update+0x2bc>)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	440b      	add	r3, r1
 80007ee:	3304      	adds	r3, #4
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80007f8:	63d3      	str	r3, [r2, #60]	; 0x3c
        	if((HAL_GPIO_ReadPin(thrusters[i].port, thrusters[i].pin)==GPIO_PIN_RESET))
 80007fa:	e095      	b.n	8000928 <thrusters_update+0x368>
              __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, THRUSTER_PWM_NEUTRAL);
 80007fc:	491f      	ldr	r1, [pc, #124]	; (800087c <thrusters_update+0x2bc>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3304      	adds	r3, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
        	if((HAL_GPIO_ReadPin(thrusters[i].port, thrusters[i].pin)==GPIO_PIN_RESET))
 8000816:	e087      	b.n	8000928 <thrusters_update+0x368>
        	}

        	}else
        	{
            __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, THRUSTER_PWM_NEUTRAL);
 8000818:	4918      	ldr	r1, [pc, #96]	; (800087c <thrusters_update+0x2bc>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10d      	bne.n	800084a <thrusters_update+0x28a>
 800082e:	4913      	ldr	r1, [pc, #76]	; (800087c <thrusters_update+0x2bc>)
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3304      	adds	r3, #4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
 8000848:	e040      	b.n	80008cc <thrusters_update+0x30c>
 800084a:	490c      	ldr	r1, [pc, #48]	; (800087c <thrusters_update+0x2bc>)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	440b      	add	r3, r1
 8000858:	3308      	adds	r3, #8
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <thrusters_update+0x2c0>
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <thrusters_update+0x2bc>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	440b      	add	r3, r1
 800086e:	3304      	adds	r3, #4
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000878:	6393      	str	r3, [r2, #56]	; 0x38
 800087a:	e027      	b.n	80008cc <thrusters_update+0x30c>
 800087c:	20000028 	.word	0x20000028
 8000880:	4945      	ldr	r1, [pc, #276]	; (8000998 <thrusters_update+0x3d8>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	3308      	adds	r3, #8
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d10d      	bne.n	80008b2 <thrusters_update+0x2f2>
 8000896:	4940      	ldr	r1, [pc, #256]	; (8000998 <thrusters_update+0x3d8>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	440b      	add	r3, r1
 80008a4:	3304      	adds	r3, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80008ae:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008b0:	e00c      	b.n	80008cc <thrusters_update+0x30c>
 80008b2:	4939      	ldr	r1, [pc, #228]	; (8000998 <thrusters_update+0x3d8>)
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	440b      	add	r3, r1
 80008c0:	3304      	adds	r3, #4
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
        	if((HAL_GPIO_ReadPin(thrusters[i].port, thrusters[i].pin)==GPIO_PIN_RESET))
 80008cc:	4932      	ldr	r1, [pc, #200]	; (8000998 <thrusters_update+0x3d8>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	440b      	add	r3, r1
 80008da:	3310      	adds	r3, #16
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	492e      	ldr	r1, [pc, #184]	; (8000998 <thrusters_update+0x3d8>)
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	440b      	add	r3, r1
 80008ec:	3314      	adds	r3, #20
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f003 f8b7 	bl	8003a64 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d115      	bne.n	8000928 <thrusters_update+0x368>
          	  HAL_GPIO_WritePin(thrusters[i].port, thrusters[i].pin, GPIO_PIN_SET);
 80008fc:	4926      	ldr	r1, [pc, #152]	; (8000998 <thrusters_update+0x3d8>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	440b      	add	r3, r1
 800090a:	3310      	adds	r3, #16
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	4922      	ldr	r1, [pc, #136]	; (8000998 <thrusters_update+0x3d8>)
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	440b      	add	r3, r1
 800091c:	3314      	adds	r3, #20
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	2201      	movs	r2, #1
 8000922:	4619      	mov	r1, r3
 8000924:	f003 f8b5 	bl	8003a92 <HAL_GPIO_WritePin>

        	}
        	if(thrusters[i].velocity==0)
 8000928:	491b      	ldr	r1, [pc, #108]	; (8000998 <thrusters_update+0x3d8>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	330c      	adds	r3, #12
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d115      	bne.n	800096a <thrusters_update+0x3aa>
        	{
        	  HAL_GPIO_WritePin(thrusters[i].port, thrusters[i].pin, GPIO_PIN_RESET);
 800093e:	4916      	ldr	r1, [pc, #88]	; (8000998 <thrusters_update+0x3d8>)
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	440b      	add	r3, r1
 800094c:	3310      	adds	r3, #16
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	4911      	ldr	r1, [pc, #68]	; (8000998 <thrusters_update+0x3d8>)
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	3314      	adds	r3, #20
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	f003 f894 	bl	8003a92 <HAL_GPIO_WritePin>
        	}
            thrusters[i].need_update = false;
 800096a:	490b      	ldr	r1, [pc, #44]	; (8000998 <thrusters_update+0x3d8>)
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	440b      	add	r3, r1
 8000978:	3317      	adds	r3, #23
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < THRUSTERS_NUM; i++){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b07      	cmp	r3, #7
 8000988:	f77f ae20 	ble.w	80005cc <thrusters_update+0xc>
        }
    }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000028 	.word	0x20000028

0800099c <init_thrusters_data>:



void init_thrusters_data(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
    thrusters[0].velocity = THRUSTER_PWM_NEUTRAL;
 80009a0:	4b7b      	ldr	r3, [pc, #492]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009a6:	819a      	strh	r2, [r3, #12]
    thrusters[0].htim = &htim1;
 80009a8:	4b79      	ldr	r3, [pc, #484]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009aa:	4a7a      	ldr	r2, [pc, #488]	; (8000b94 <init_thrusters_data+0x1f8>)
 80009ac:	605a      	str	r2, [r3, #4]
    thrusters[0].chanel = TIM_CHANNEL_1;
 80009ae:	4b78      	ldr	r3, [pc, #480]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
    thrusters[0].need_update = true;
 80009b4:	4b76      	ldr	r3, [pc, #472]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	75da      	strb	r2, [r3, #23]
    thrusters[0].enablead = true;
 80009ba:	4b75      	ldr	r3, [pc, #468]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	759a      	strb	r2, [r3, #22]
    thrusters[0].port = CS1_GPIO_Port;
 80009c0:	4b73      	ldr	r3, [pc, #460]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009c2:	4a75      	ldr	r2, [pc, #468]	; (8000b98 <init_thrusters_data+0x1fc>)
 80009c4:	611a      	str	r2, [r3, #16]
    thrusters[0].pin = CS1_Pin;
 80009c6:	4b72      	ldr	r3, [pc, #456]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	829a      	strh	r2, [r3, #20]


    thrusters[1].velocity = THRUSTER_PWM_NEUTRAL;
 80009cc:	4b70      	ldr	r3, [pc, #448]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009ce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009d2:	849a      	strh	r2, [r3, #36]	; 0x24
    thrusters[1].htim = &htim1;
 80009d4:	4b6e      	ldr	r3, [pc, #440]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009d6:	4a6f      	ldr	r2, [pc, #444]	; (8000b94 <init_thrusters_data+0x1f8>)
 80009d8:	61da      	str	r2, [r3, #28]
    thrusters[1].chanel = TIM_CHANNEL_2;
 80009da:	4b6d      	ldr	r3, [pc, #436]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009dc:	2204      	movs	r2, #4
 80009de:	621a      	str	r2, [r3, #32]
    thrusters[1].need_update = true;
 80009e0:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    thrusters[1].enablead = true;
 80009e8:	4b69      	ldr	r3, [pc, #420]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    thrusters[1].port = CS2_GPIO_Port;
 80009f0:	4b67      	ldr	r3, [pc, #412]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009f2:	4a69      	ldr	r2, [pc, #420]	; (8000b98 <init_thrusters_data+0x1fc>)
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
    thrusters[1].pin = CS2_Pin;
 80009f6:	4b66      	ldr	r3, [pc, #408]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009f8:	2220      	movs	r2, #32
 80009fa:	859a      	strh	r2, [r3, #44]	; 0x2c


    thrusters[2].velocity = THRUSTER_PWM_NEUTRAL;
 80009fc:	4b64      	ldr	r3, [pc, #400]	; (8000b90 <init_thrusters_data+0x1f4>)
 80009fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a02:	879a      	strh	r2, [r3, #60]	; 0x3c
    thrusters[2].htim = &htim1;
 8000a04:	4b62      	ldr	r3, [pc, #392]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a06:	4a63      	ldr	r2, [pc, #396]	; (8000b94 <init_thrusters_data+0x1f8>)
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
    thrusters[2].chanel = TIM_CHANNEL_3;
 8000a0a:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
    thrusters[2].need_update = true;
 8000a10:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    thrusters[2].enablead = true;
 8000a18:	4b5d      	ldr	r3, [pc, #372]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    thrusters[2].port = CS3_GPIO_Port;
 8000a20:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a22:	4a5d      	ldr	r2, [pc, #372]	; (8000b98 <init_thrusters_data+0x1fc>)
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
    thrusters[2].pin = CS3_Pin;
 8000a26:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    thrusters[3].velocity = THRUSTER_PWM_NEUTRAL;
 8000a2e:	4b58      	ldr	r3, [pc, #352]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    thrusters[3].htim = &htim1;
 8000a38:	4b55      	ldr	r3, [pc, #340]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a3a:	4a56      	ldr	r2, [pc, #344]	; (8000b94 <init_thrusters_data+0x1f8>)
 8000a3c:	64da      	str	r2, [r3, #76]	; 0x4c
    thrusters[3].chanel = TIM_CHANNEL_4;
 8000a3e:	4b54      	ldr	r3, [pc, #336]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a40:	220c      	movs	r2, #12
 8000a42:	651a      	str	r2, [r3, #80]	; 0x50
    thrusters[3].need_update = true;
 8000a44:	4b52      	ldr	r3, [pc, #328]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    thrusters[3].enablead = true;
 8000a4c:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    thrusters[3].port = CS4_GPIO_Port;
 8000a54:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a56:	4a50      	ldr	r2, [pc, #320]	; (8000b98 <init_thrusters_data+0x1fc>)
 8000a58:	659a      	str	r2, [r3, #88]	; 0x58
    thrusters[3].pin = CS4_Pin;
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    thrusters[4].velocity = THRUSTER_PWM_NEUTRAL;
 8000a62:	4b4b      	ldr	r3, [pc, #300]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a68:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    thrusters[4].htim = &htim2;
 8000a6c:	4b48      	ldr	r3, [pc, #288]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a6e:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <init_thrusters_data+0x200>)
 8000a70:	665a      	str	r2, [r3, #100]	; 0x64
    thrusters[4].chanel = TIM_CHANNEL_3;
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	669a      	str	r2, [r3, #104]	; 0x68
    thrusters[4].need_update = true;
 8000a78:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    thrusters[4].enablead = true;
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    thrusters[4].port = CS5_GPIO_Port;
 8000a88:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a8a:	4a43      	ldr	r2, [pc, #268]	; (8000b98 <init_thrusters_data+0x1fc>)
 8000a8c:	671a      	str	r2, [r3, #112]	; 0x70
    thrusters[4].pin = CS5_Pin;
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a94:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

    thrusters[5].velocity = THRUSTER_PWM_NEUTRAL;
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000a9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a9e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    thrusters[5].htim = &htim2;
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000aa4:	4a3d      	ldr	r2, [pc, #244]	; (8000b9c <init_thrusters_data+0x200>)
 8000aa6:	67da      	str	r2, [r3, #124]	; 0x7c
    thrusters[5].chanel = TIM_CHANNEL_4;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    thrusters[5].need_update = true;
 8000ab0:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
    thrusters[5].enablead = true;
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    thrusters[5].port = CS6_GPIO_Port;
 8000ac0:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000ac2:	4a35      	ldr	r2, [pc, #212]	; (8000b98 <init_thrusters_data+0x1fc>)
 8000ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    thrusters[5].pin = CS6_Pin;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    thrusters[6].velocity = THRUSTER_PWM_NEUTRAL;
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000ad4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ad8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    thrusters[6].htim = &htim2;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <init_thrusters_data+0x200>)
 8000ae0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thrusters[6].chanel = TIM_CHANNEL_2;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    thrusters[6].need_update = true;
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    thrusters[6].enablead = true;
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    thrusters[6].port = CS7_GPIO_Port;
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000afe:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <init_thrusters_data+0x1fc>)
 8000b00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    thrusters[6].pin = CS7_Pin;
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b0a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

    thrusters[7].velocity = THRUSTER_PWM_NEUTRAL;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b14:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    thrusters[7].htim = &htim2;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b1a:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <init_thrusters_data+0x200>)
 8000b1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    thrusters[7].chanel = TIM_CHANNEL_1;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    thrusters[7].need_update = true;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
    thrusters[7].enablead = true;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    thrusters[7].port = CS8_GPIO_Port;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <init_thrusters_data+0x1fc>)
 8000b3c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    thrusters[7].pin = CS8_Pin;
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b46:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

    thrusters[0].address = 2;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	701a      	strb	r2, [r3, #0]
    thrusters[1].address = 0;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	761a      	strb	r2, [r3, #24]
    thrusters[2].address = 4;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    thrusters[3].address = 7;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    thrusters[4].address = 6;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b68:	2206      	movs	r2, #6
 8000b6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    thrusters[5].address = 5;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b70:	2205      	movs	r2, #5
 8000b72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    thrusters[6].address = 3;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b78:	2203      	movs	r2, #3
 8000b7a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    thrusters[7].address = 1;
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <init_thrusters_data+0x1f4>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

};
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000028 	.word	0x20000028
 8000b94:	200001d0 	.word	0x200001d0
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	20000218 	.word	0x20000218

08000ba0 <init_thrusters>:

void init_thrusters(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    init_thrusters_data();
 8000ba4:	f7ff fefa 	bl	800099c <init_thrusters_data>
    thrusters_update();
 8000ba8:	f7ff fd0a 	bl	80005c0 <thrusters_update>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <init_thrusters+0x50>)
 8000bb0:	f003 ffb8 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <init_thrusters+0x50>)
 8000bb8:	f003 ffb4 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <init_thrusters+0x50>)
 8000bc0:	f003 ffb0 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8000bc4:	210c      	movs	r1, #12
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <init_thrusters+0x50>)
 8000bc8:	f003 ffac 	bl	8004b24 <HAL_TIM_PWM_Start_IT>

    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <init_thrusters+0x54>)
 8000bd0:	f003 ffa8 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <init_thrusters+0x54>)
 8000bd8:	f003 ffa4 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <init_thrusters+0x54>)
 8000be0:	f003 ffa0 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000be4:	210c      	movs	r1, #12
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <init_thrusters+0x54>)
 8000be8:	f003 ff9c 	bl	8004b24 <HAL_TIM_PWM_Start_IT>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200001d0 	.word	0x200001d0
 8000bf4:	20000218 	.word	0x20000218

08000bf8 <adc_init>:

volatile uint16_t adc[16] = {0,};


void adc_init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <adc_init+0x20>)
 8000bfe:	f001 fe07 	bl	8002810 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(1000);
 8000c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c06:	f001 f9d1 	bl	8001fac <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 15);
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	4903      	ldr	r1, [pc, #12]	; (8000c1c <adc_init+0x24>)
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <adc_init+0x20>)
 8000c10:	f001 fac8 	bl	80021a4 <HAL_ADC_Start_DMA>

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000015c 	.word	0x2000015c
 8000c1c:	200000e8 	.word	0x200000e8

08000c20 <trans_adc>:

void trans_adc()
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	thrusters[1].current=adc[1];
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <trans_adc+0xa4>)
 8000c26:	885b      	ldrh	r3, [r3, #2]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <trans_adc+0xa8>)
 8000c2c:	84da      	strh	r2, [r3, #38]	; 0x26
	thrusters[2].current=adc[2];
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <trans_adc+0xa4>)
 8000c30:	889b      	ldrh	r3, [r3, #4]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <trans_adc+0xa8>)
 8000c36:	87da      	strh	r2, [r3, #62]	; 0x3e
	thrusters[3].current=adc[3];
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <trans_adc+0xa4>)
 8000c3a:	88db      	ldrh	r3, [r3, #6]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <trans_adc+0xa8>)
 8000c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	thrusters[4].current=adc[4];
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <trans_adc+0xa4>)
 8000c46:	891b      	ldrh	r3, [r3, #8]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <trans_adc+0xa8>)
 8000c4c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	thrusters[5].current=adc[5];
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <trans_adc+0xa4>)
 8000c52:	895b      	ldrh	r3, [r3, #10]
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <trans_adc+0xa8>)
 8000c58:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	thrusters[6].current=adc[6];
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <trans_adc+0xa4>)
 8000c5e:	899b      	ldrh	r3, [r3, #12]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <trans_adc+0xa8>)
 8000c64:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	thrusters[7].current=adc[7];
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <trans_adc+0xa4>)
 8000c6a:	89db      	ldrh	r3, [r3, #14]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <trans_adc+0xa8>)
 8000c70:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	rov_state.current_light = adc[8];
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <trans_adc+0xa4>)
 8000c76:	8a1b      	ldrh	r3, [r3, #16]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <trans_adc+0xac>)
 8000c7c:	815a      	strh	r2, [r3, #10]
	rov_state.current_logic = adc[9];
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <trans_adc+0xa4>)
 8000c80:	8a5b      	ldrh	r3, [r3, #18]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <trans_adc+0xac>)
 8000c86:	811a      	strh	r2, [r3, #8]

	rov_state.vol_bat_cell[0] = adc[10];
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <trans_adc+0xa4>)
 8000c8a:	8a9b      	ldrh	r3, [r3, #20]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <trans_adc+0xac>)
 8000c90:	81da      	strh	r2, [r3, #14]
	rov_state.vol_bat_cell[1] = adc[11];
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <trans_adc+0xa4>)
 8000c94:	8adb      	ldrh	r3, [r3, #22]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <trans_adc+0xac>)
 8000c9a:	821a      	strh	r2, [r3, #16]
	rov_state.vol_bat_cell[2] = adc[12];
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <trans_adc+0xa4>)
 8000c9e:	8b1b      	ldrh	r3, [r3, #24]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <trans_adc+0xac>)
 8000ca4:	825a      	strh	r2, [r3, #18]
	rov_state.vol_bat_cell[3] = adc[13];
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <trans_adc+0xa4>)
 8000ca8:	8b5b      	ldrh	r3, [r3, #26]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <trans_adc+0xac>)
 8000cae:	829a      	strh	r2, [r3, #20]
	rov_state.temperature = adc[14];
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <trans_adc+0xa4>)
 8000cb2:	8b9b      	ldrh	r3, [r3, #28]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <trans_adc+0xac>)
 8000cb8:	819a      	strh	r2, [r3, #12]

}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200000e8 	.word	0x200000e8
 8000cc8:	20000028 	.word	0x20000028
 8000ccc:	20000144 	.word	0x20000144

08000cd0 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(hadc->ErrorCode == HAL_ADC_ERROR_OVR)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d108      	bne.n	8000cf2 <HAL_ADC_ErrorCallback+0x22>
  {
	    HAL_ADC_Stop_DMA(&hadc1);
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <HAL_ADC_ErrorCallback+0x44>)
 8000ce2:	f001 fb3d 	bl	8002360 <HAL_ADC_Stop_DMA>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 15);
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	490b      	ldr	r1, [pc, #44]	; (8000d18 <HAL_ADC_ErrorCallback+0x48>)
 8000cea:	480a      	ldr	r0, [pc, #40]	; (8000d14 <HAL_ADC_ErrorCallback+0x44>)
 8000cec:	f001 fa5a 	bl	80021a4 <HAL_ADC_Start_DMA>
  else if(hadc->ErrorCode == HAL_ADC_ERROR_DMA)
  {
	    HAL_ADC_Stop_DMA(&hadc1);
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 15);
  }
}
 8000cf0:	e00b      	b.n	8000d0a <HAL_ADC_ErrorCallback+0x3a>
  else if(hadc->ErrorCode == HAL_ADC_ERROR_DMA)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d107      	bne.n	8000d0a <HAL_ADC_ErrorCallback+0x3a>
	    HAL_ADC_Stop_DMA(&hadc1);
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_ADC_ErrorCallback+0x44>)
 8000cfc:	f001 fb30 	bl	8002360 <HAL_ADC_Stop_DMA>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 15);
 8000d00:	220f      	movs	r2, #15
 8000d02:	4905      	ldr	r1, [pc, #20]	; (8000d18 <HAL_ADC_ErrorCallback+0x48>)
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <HAL_ADC_ErrorCallback+0x44>)
 8000d06:	f001 fa4d 	bl	80021a4 <HAL_ADC_Start_DMA>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000015c 	.word	0x2000015c
 8000d18:	200000e8 	.word	0x200000e8

08000d1c <parse_package>:
extern thruster_t thrusters[THRUSTERS_NUM];

bool frameready = false;

bool parse_package(uint8_t  *message)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	//check_crc(message, RPI_REQUEST_LENGTH)
    if  (1)  {
    	for(int i = 0; i < THRUSTERS_NUM; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e00c      	b.n	8000d44 <parse_package+0x28>
    	{
        set_thruster_velocity(i, ((struct RPIRequest*)message)->velocity[i]);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	889b      	ldrh	r3, [r3, #4]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fc19 	bl	8000570 <set_thruster_velocity>
    	for(int i = 0; i < THRUSTERS_NUM; i++)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	ddef      	ble.n	8000d2a <parse_package+0xe>
    	}

    	memcpy(rov_state.Light_pw, ((struct RPIRequest*)message)->Light_pw, sizeof(rov_state.Light_pw));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3316      	adds	r3, #22
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <parse_package+0x54>)
 8000d54:	605a      	str	r2, [r3, #4]
    	rov_state.con_state = ((struct RPIRequest*)message)->con_state;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	785a      	ldrb	r2, [r3, #1]
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <parse_package+0x54>)
 8000d5c:	701a      	strb	r2, [r3, #0]
    	rov_state.tilt = ((struct RPIRequest*)message)->tilt;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	8a9a      	ldrh	r2, [r3, #20]
 8000d62:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <parse_package+0x54>)
 8000d64:	805a      	strh	r2, [r3, #2]

        return true;
 8000d66:	2301      	movs	r3, #1
    }
    return false;
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000144 	.word	0x20000144

08000d74 <init_comm>:

void init_comm(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart4, message_buff, RPI_REQUEST_LENGTH);
 8000d78:	221b      	movs	r2, #27
 8000d7a:	4903      	ldr	r1, [pc, #12]	; (8000d88 <init_comm+0x14>)
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <init_comm+0x18>)
 8000d7e:	f004 fd93 	bl	80058a8 <HAL_UART_Receive_DMA>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000108 	.word	0x20000108
 8000d8c:	200002a8 	.word	0x200002a8

08000d90 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    if(huart == &huart4){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_UART_ErrorCallback+0x30>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d10a      	bne.n	8000db6 <HAL_UART_ErrorCallback+0x26>
        HAL_UART_DeInit(&huart4);
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <HAL_UART_ErrorCallback+0x30>)
 8000da2:	f004 fcde 	bl	8005762 <HAL_UART_DeInit>
        frameready = false;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_UART_ErrorCallback+0x34>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart4, message_buff, RPI_REQUEST_LENGTH);
 8000dac:	221b      	movs	r2, #27
 8000dae:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <HAL_UART_ErrorCallback+0x38>)
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <HAL_UART_ErrorCallback+0x30>)
 8000db2:	f004 fd79 	bl	80058a8 <HAL_UART_Receive_DMA>
    }
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200002a8 	.word	0x200002a8
 8000dc4:	2000015a 	.word	0x2000015a
 8000dc8:	20000108 	.word	0x20000108

08000dcc <update_com>:

void update_com(){
 8000dcc:	b598      	push	{r3, r4, r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    if(frameready){
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <update_com+0xbc>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d055      	beq.n	8000e84 <update_com+0xb8>
    	parse_package(message_buff);
 8000dd8:	482c      	ldr	r0, [pc, #176]	; (8000e8c <update_com+0xc0>)
 8000dda:	f7ff ff9f 	bl	8000d1c <parse_package>
        frameready = false;
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <update_com+0xbc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <update_com+0xc4>)
 8000dea:	f002 fe6a 	bl	8003ac2 <HAL_GPIO_TogglePin>
        ((struct RPIResponse *)tx_message_buff)->A5 = 0xA5;
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <update_com+0xc8>)
 8000df0:	22a5      	movs	r2, #165	; 0xa5
 8000df2:	701a      	strb	r2, [r3, #0]
        ((struct RPIResponse *)tx_message_buff)->con_state = rov_state.con_state;
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <update_com+0xc8>)
 8000df6:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <update_com+0xcc>)
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	705a      	strb	r2, [r3, #1]
        ((struct RPIResponse *)tx_message_buff)->current_logic = rov_state.current_logic;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <update_com+0xc8>)
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <update_com+0xcc>)
 8000e00:	8912      	ldrh	r2, [r2, #8]
 8000e02:	805a      	strh	r2, [r3, #2]
    	memcpy(((struct RPIResponse *)tx_message_buff)->vol_bat_cell, rov_state.vol_bat_cell, sizeof(rov_state.vol_bat_cell));
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <update_com+0xd0>)
 8000e06:	2208      	movs	r2, #8
 8000e08:	4925      	ldr	r1, [pc, #148]	; (8000ea0 <update_com+0xd4>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fc92 	bl	8006734 <memcpy>

        ((struct RPIResponse *)tx_message_buff)->current_vma[0] = thrusters[0].current;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <update_com+0xc8>)
 8000e12:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <update_com+0xd8>)
 8000e14:	89d2      	ldrh	r2, [r2, #14]
 8000e16:	809a      	strh	r2, [r3, #4]
        ((struct RPIResponse *)tx_message_buff)->current_vma[1] = thrusters[1].current;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <update_com+0xc8>)
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <update_com+0xd8>)
 8000e1c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000e1e:	80da      	strh	r2, [r3, #6]
        ((struct RPIResponse *)tx_message_buff)->current_vma[2] = thrusters[2].current;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <update_com+0xc8>)
 8000e22:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <update_com+0xd8>)
 8000e24:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8000e26:	811a      	strh	r2, [r3, #8]
        ((struct RPIResponse *)tx_message_buff)->current_vma[3] = thrusters[3].current;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <update_com+0xc8>)
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <update_com+0xd8>)
 8000e2c:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8000e30:	815a      	strh	r2, [r3, #10]
        ((struct RPIResponse *)tx_message_buff)->current_vma[4] = thrusters[4].current;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <update_com+0xc8>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <update_com+0xd8>)
 8000e36:	f8b2 206e 	ldrh.w	r2, [r2, #110]	; 0x6e
 8000e3a:	819a      	strh	r2, [r3, #12]
        ((struct RPIResponse *)tx_message_buff)->current_vma[5] = thrusters[5].current;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <update_com+0xc8>)
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <update_com+0xd8>)
 8000e40:	f8b2 2086 	ldrh.w	r2, [r2, #134]	; 0x86
 8000e44:	81da      	strh	r2, [r3, #14]
        ((struct RPIResponse *)tx_message_buff)->current_vma[6] = thrusters[6].current;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <update_com+0xc8>)
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <update_com+0xd8>)
 8000e4a:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8000e4e:	821a      	strh	r2, [r3, #16]
        ((struct RPIResponse *)tx_message_buff)->current_vma[7] = thrusters[7].current;
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <update_com+0xc8>)
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <update_com+0xd8>)
 8000e54:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
 8000e58:	825a      	strh	r2, [r3, #18]
        ((struct RPIResponse *)tx_message_buff)->crc = calculate_crc(tx_message_buff, RPI_RESPONSE_LENGTH-1);
 8000e5a:	4c0e      	ldr	r4, [pc, #56]	; (8000e94 <update_com+0xc8>)
 8000e5c:	211d      	movs	r1, #29
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <update_com+0xc8>)
 8000e60:	f000 f838 	bl	8000ed4 <calculate_crc>
 8000e64:	4603      	mov	r3, r0
 8000e66:	83a3      	strh	r3, [r4, #28]

        HAL_UART_Transmit_DMA(&huart4, tx_message_buff, RPI_RESPONSE_LENGTH);
 8000e68:	221e      	movs	r2, #30
 8000e6a:	490a      	ldr	r1, [pc, #40]	; (8000e94 <update_com+0xc8>)
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <update_com+0xdc>)
 8000e6e:	f004 fcab 	bl	80057c8 <HAL_UART_Transmit_DMA>
        while(HAL_UART_Receive_DMA(&huart4, message_buff, RPI_REQUEST_LENGTH)!=HAL_OK);
 8000e72:	bf00      	nop
 8000e74:	221b      	movs	r2, #27
 8000e76:	4905      	ldr	r1, [pc, #20]	; (8000e8c <update_com+0xc0>)
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <update_com+0xdc>)
 8000e7a:	f004 fd15 	bl	80058a8 <HAL_UART_Receive_DMA>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f7      	bne.n	8000e74 <update_com+0xa8>
    }
}
 8000e84:	bf00      	nop
 8000e86:	bd98      	pop	{r3, r4, r7, pc}
 8000e88:	2000015a 	.word	0x2000015a
 8000e8c:	20000108 	.word	0x20000108
 8000e90:	40011000 	.word	0x40011000
 8000e94:	20000124 	.word	0x20000124
 8000e98:	20000144 	.word	0x20000144
 8000e9c:	20000138 	.word	0x20000138
 8000ea0:	20000152 	.word	0x20000152
 8000ea4:	20000028 	.word	0x20000028
 8000ea8:	200002a8 	.word	0x200002a8

08000eac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    if(huart == &huart4){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_UART_RxCpltCallback+0x20>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0x16>
        frameready = true;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_UART_RxCpltCallback+0x24>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	200002a8 	.word	0x200002a8
 8000ed0:	2000015a 	.word	0x2000015a

08000ed4 <calculate_crc>:


#include "crc.h"

uint16_t calculate_crc(unsigned char *data_ptr, unsigned short size)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
    uint16_t wcrc=0xFFFF;// preset 16 position crc register , The initial values are all 1
 8000ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee4:	82fb      	strh	r3, [r7, #22]
    uint8_t temp;// Define intermediate variables
    int i=0,j=0;// Define count
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
    for(i=0;i<size;i++)// Cycle through each data
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e028      	b.n	8000f46 <calculate_crc+0x72>
    {

       temp=data_ptr[i];
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	72fb      	strb	r3, [r7, #11]
       wcrc^=temp;
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	8afb      	ldrh	r3, [r7, #22]
 8000f04:	4053      	eors	r3, r2
 8000f06:	82fb      	strh	r3, [r7, #22]
       for(j=0;j<8;j++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e015      	b.n	8000f3a <calculate_crc+0x66>

          // Judge whether what is moved to the right is 1, If it is 1 XOR with polynomials .
          if(wcrc&0x0001){
 8000f0e:	8afb      	ldrh	r3, [r7, #22]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00a      	beq.n	8000f2e <calculate_crc+0x5a>

              wcrc>>=1;// First move the data one bit to the right
 8000f18:	8afb      	ldrh	r3, [r7, #22]
 8000f1a:	085b      	lsrs	r3, r3, #1
 8000f1c:	82fb      	strh	r3, [r7, #22]
              wcrc^=0xA001;// XOR with the polynomial above
 8000f1e:	8afb      	ldrh	r3, [r7, #22]
 8000f20:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000f24:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	82fb      	strh	r3, [r7, #22]
 8000f2c:	e002      	b.n	8000f34 <calculate_crc+0x60>
          }
          else// If not 1, Then directly remove
              wcrc>>=1;// Direct removal
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	085b      	lsrs	r3, r3, #1
 8000f32:	82fb      	strh	r3, [r7, #22]
       for(j=0;j<8;j++){
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	dde6      	ble.n	8000f0e <calculate_crc+0x3a>
    for(i=0;i<size;i++)// Cycle through each data
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	3301      	adds	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dbd2      	blt.n	8000ef4 <calculate_crc+0x20>
       }
    }
    temp=wcrc;//crc Value
 8000f4e:	8afb      	ldrh	r3, [r7, #22]
 8000f50:	72fb      	strb	r3, [r7, #11]
    return wcrc;
 8000f52:	8afb      	ldrh	r3, [r7, #22]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 ffc0 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f81c 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 fb88 	bl	8001680 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f70:	f000 fb4c 	bl	800160c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f74:	f000 f876 	bl	8001064 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f78:	f000 f978 	bl	800126c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f7c:	f000 fa1e 	bl	80013bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f80:	f000 fa96 	bl	80014b0 <MX_TIM3_Init>
  MX_UART4_Init();
 8000f84:	f000 faee 	bl	8001564 <MX_UART4_Init>
  MX_UART5_Init();
 8000f88:	f000 fb16 	bl	80015b8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <main+0x40>)
 8000f92:	f002 fd96 	bl	8003ac2 <HAL_GPIO_TogglePin>
  proce_init();
 8000f96:	f000 fbe6 	bl	8001766 <proce_init>


  while (1)
  {

	proce_loop();
 8000f9a:	f000 fbee 	bl	800177a <proce_loop>
 8000f9e:	e7fc      	b.n	8000f9a <main+0x3a>
 8000fa0:	40011000 	.word	0x40011000

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09c      	sub	sp, #112	; 0x70
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fae:	2238      	movs	r2, #56	; 0x38
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fbcc 	bl	8006750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 fbbe 	bl	8006750 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ff0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fd7a 	bl	8003af4 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001006:	f000 fba9 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f87b 	bl	8004120 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001030:	f000 fb94 	bl	800175c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001034:	2302      	movs	r3, #2
 8001036:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fa9b 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800104c:	f000 fb86 	bl	800175c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <SystemClock_Config+0xbc>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	3770      	adds	r7, #112	; 0x70
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	42420070 	.word	0x42420070

08001064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001074:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <MX_ADC1_Init+0x200>)
 8001076:	4a7c      	ldr	r2, [pc, #496]	; (8001268 <MX_ADC1_Init+0x204>)
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107a:	4b7a      	ldr	r3, [pc, #488]	; (8001264 <MX_ADC1_Init+0x200>)
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001082:	4b78      	ldr	r3, [pc, #480]	; (8001264 <MX_ADC1_Init+0x200>)
 8001084:	2201      	movs	r2, #1
 8001086:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001088:	4b76      	ldr	r3, [pc, #472]	; (8001264 <MX_ADC1_Init+0x200>)
 800108a:	2200      	movs	r2, #0
 800108c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108e:	4b75      	ldr	r3, [pc, #468]	; (8001264 <MX_ADC1_Init+0x200>)
 8001090:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b73      	ldr	r3, [pc, #460]	; (8001264 <MX_ADC1_Init+0x200>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 15;
 800109c:	4b71      	ldr	r3, [pc, #452]	; (8001264 <MX_ADC1_Init+0x200>)
 800109e:	220f      	movs	r2, #15
 80010a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	4870      	ldr	r0, [pc, #448]	; (8001264 <MX_ADC1_Init+0x200>)
 80010a4:	f000 ffa6 	bl	8001ff4 <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010ae:	f000 fb55 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80010ba:	2303      	movs	r3, #3
 80010bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4868      	ldr	r0, [pc, #416]	; (8001264 <MX_ADC1_Init+0x200>)
 80010c4:	f001 f9aa 	bl	800241c <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 fb45 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4861      	ldr	r0, [pc, #388]	; (8001264 <MX_ADC1_Init+0x200>)
 80010e0:	f001 f99c 	bl	800241c <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010ea:	f000 fb37 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010f2:	2303      	movs	r3, #3
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	485a      	ldr	r0, [pc, #360]	; (8001264 <MX_ADC1_Init+0x200>)
 80010fc:	f001 f98e 	bl	800241c <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001106:	f000 fb29 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800110a:	2303      	movs	r3, #3
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800110e:	2304      	movs	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4853      	ldr	r0, [pc, #332]	; (8001264 <MX_ADC1_Init+0x200>)
 8001118:	f001 f980 	bl	800241c <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001122:	f000 fb1b 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001126:	2304      	movs	r3, #4
 8001128:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800112a:	2305      	movs	r3, #5
 800112c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	484c      	ldr	r0, [pc, #304]	; (8001264 <MX_ADC1_Init+0x200>)
 8001134:	f001 f972 	bl	800241c <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800113e:	f000 fb0d 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001142:	2305      	movs	r3, #5
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001146:	2306      	movs	r3, #6
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4845      	ldr	r0, [pc, #276]	; (8001264 <MX_ADC1_Init+0x200>)
 8001150:	f001 f964 	bl	800241c <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800115a:	f000 faff 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800115e:	2306      	movs	r3, #6
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001162:	2307      	movs	r3, #7
 8001164:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	483e      	ldr	r0, [pc, #248]	; (8001264 <MX_ADC1_Init+0x200>)
 800116c:	f001 f956 	bl	800241c <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001176:	f000 faf1 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800117a:	2307      	movs	r3, #7
 800117c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800117e:	2308      	movs	r3, #8
 8001180:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4837      	ldr	r0, [pc, #220]	; (8001264 <MX_ADC1_Init+0x200>)
 8001188:	f001 f948 	bl	800241c <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001192:	f000 fae3 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001196:	2308      	movs	r3, #8
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800119a:	2309      	movs	r3, #9
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4830      	ldr	r0, [pc, #192]	; (8001264 <MX_ADC1_Init+0x200>)
 80011a4:	f001 f93a 	bl	800241c <HAL_ADC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80011ae:	f000 fad5 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011b2:	2309      	movs	r3, #9
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80011b6:	230a      	movs	r3, #10
 80011b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4829      	ldr	r0, [pc, #164]	; (8001264 <MX_ADC1_Init+0x200>)
 80011c0:	f001 f92c 	bl	800241c <HAL_ADC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80011ca:	f000 fac7 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011ce:	230a      	movs	r3, #10
 80011d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80011d2:	230b      	movs	r3, #11
 80011d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4822      	ldr	r0, [pc, #136]	; (8001264 <MX_ADC1_Init+0x200>)
 80011dc:	f001 f91e 	bl	800241c <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80011e6:	f000 fab9 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011ea:	230b      	movs	r3, #11
 80011ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80011ee:	230c      	movs	r3, #12
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	481b      	ldr	r0, [pc, #108]	; (8001264 <MX_ADC1_Init+0x200>)
 80011f8:	f001 f910 	bl	800241c <HAL_ADC_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8001202:	f000 faab 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001206:	230c      	movs	r3, #12
 8001208:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800120a:	230d      	movs	r3, #13
 800120c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <MX_ADC1_Init+0x200>)
 8001214:	f001 f902 	bl	800241c <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 800121e:	f000 fa9d 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001222:	230d      	movs	r3, #13
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001226:	230e      	movs	r3, #14
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_ADC1_Init+0x200>)
 8001230:	f001 f8f4 	bl	800241c <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 800123a:	f000 fa8f 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800123e:	2310      	movs	r3, #16
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001242:	230f      	movs	r3, #15
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_ADC1_Init+0x200>)
 800124c:	f001 f8e6 	bl	800241c <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8001256:	f000 fa81 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000015c 	.word	0x2000015c
 8001268:	40012400 	.word	0x40012400

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	; 0x48
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2220      	movs	r2, #32
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f005 fa5a 	bl	8006750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <MX_TIM1_Init+0x148>)
 800129e:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <MX_TIM1_Init+0x14c>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 34;
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012a4:	2222      	movs	r2, #34	; 0x22
 80012a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012b0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c8:	483a      	ldr	r0, [pc, #232]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012ca:	f003 fbdb 	bl	8004a84 <HAL_TIM_PWM_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012d4:	f000 fa42 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e4:	4619      	mov	r1, r3
 80012e6:	4833      	ldr	r0, [pc, #204]	; (80013b4 <MX_TIM1_Init+0x148>)
 80012e8:	f004 f922 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012f2:	f000 fa33 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500;
 80012fa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4825      	ldr	r0, [pc, #148]	; (80013b4 <MX_TIM1_Init+0x148>)
 800131e:	f003 fdff 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001328:	f000 fa18 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	2204      	movs	r2, #4
 8001332:	4619      	mov	r1, r3
 8001334:	481f      	ldr	r0, [pc, #124]	; (80013b4 <MX_TIM1_Init+0x148>)
 8001336:	f003 fdf3 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001340:	f000 fa0c 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2208      	movs	r2, #8
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_TIM1_Init+0x148>)
 800134e:	f003 fde7 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001358:	f000 fa00 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	220c      	movs	r2, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4813      	ldr	r0, [pc, #76]	; (80013b4 <MX_TIM1_Init+0x148>)
 8001366:	f003 fddb 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001370:	f000 f9f4 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM1_Init+0x148>)
 8001398:	f004 f930 	bl	80055fc <HAL_TIMEx_ConfigBreakDeadTime>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80013a2:	f000 f9db 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM1_Init+0x148>)
 80013a8:	f000 fb10 	bl	80019cc <HAL_TIM_MspPostInit>

}
 80013ac:	bf00      	nop
 80013ae:	3748      	adds	r7, #72	; 0x48
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001d0 	.word	0x200001d0
 80013b8:	40012c00 	.word	0x40012c00

080013bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <MX_TIM2_Init+0xf0>)
 80013e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 34;
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <MX_TIM2_Init+0xf0>)
 80013e8:	2222      	movs	r2, #34	; 0x22
 80013ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MX_TIM2_Init+0xf0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <MX_TIM2_Init+0xf0>)
 80013f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <MX_TIM2_Init+0xf0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_TIM2_Init+0xf0>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <MX_TIM2_Init+0xf0>)
 8001408:	f003 fb3c 	bl	8004a84 <HAL_TIM_PWM_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001412:	f000 f9a3 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4619      	mov	r1, r3
 8001424:	4821      	ldr	r0, [pc, #132]	; (80014ac <MX_TIM2_Init+0xf0>)
 8001426:	f004 f883 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001430:	f000 f994 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001434:	2360      	movs	r3, #96	; 0x60
 8001436:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001438:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800143c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4817      	ldr	r0, [pc, #92]	; (80014ac <MX_TIM2_Init+0xf0>)
 800144e:	f003 fd67 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001458:	f000 f980 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2204      	movs	r2, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4812      	ldr	r0, [pc, #72]	; (80014ac <MX_TIM2_Init+0xf0>)
 8001464:	f003 fd5c 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800146e:	f000 f975 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2208      	movs	r2, #8
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM2_Init+0xf0>)
 800147a:	f003 fd51 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001484:	f000 f96a 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	220c      	movs	r2, #12
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <MX_TIM2_Init+0xf0>)
 8001490:	f003 fd46 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800149a:	f000 f95f 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <MX_TIM2_Init+0xf0>)
 80014a0:	f000 fa94 	bl	80019cc <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000218 	.word	0x20000218

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_TIM3_Init+0xac>)
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <MX_TIM3_Init+0xb0>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 34;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <MX_TIM3_Init+0xac>)
 80014da:	2222      	movs	r2, #34	; 0x22
 80014dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM3_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_TIM3_Init+0xac>)
 80014e6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_TIM3_Init+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM3_Init+0xac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_TIM3_Init+0xac>)
 80014fa:	f003 fac3 	bl	8004a84 <HAL_TIM_PWM_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001504:	f000 f92a 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_TIM3_Init+0xac>)
 8001518:	f004 f80a 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001522:	f000 f91b 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
 8001528:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800152a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800152e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM3_Init+0xac>)
 8001540:	f003 fcee 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800154a:	f000 f907 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM3_Init+0xac>)
 8001550:	f000 fa3c 	bl	80019cc <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000260 	.word	0x20000260
 8001560:	40000400 	.word	0x40000400

08001564 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_UART4_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_UART4_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_UART4_Init+0x4c>)
 8001570:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001574:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_UART4_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_UART4_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_UART4_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_UART4_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_UART4_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_UART4_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_UART4_Init+0x4c>)
 800159c:	f004 f891 	bl	80056c2 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80015a6:	f000 f8d9 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002a8 	.word	0x200002a8
 80015b4:	40004c00 	.word	0x40004c00

080015b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_UART5_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_UART5_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_UART5_Init+0x4c>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_UART5_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_UART5_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_UART5_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_UART5_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_UART5_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_UART5_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_UART5_Init+0x4c>)
 80015f0:	f004 f867 	bl	80056c2 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80015fa:	f000 f8af 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002f0 	.word	0x200002f0
 8001608:	40005000 	.word	0x40005000

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_DMA_Init+0x70>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <MX_DMA_Init+0x70>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_DMA_Init+0x70>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_DMA_Init+0x70>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <MX_DMA_Init+0x70>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_DMA_Init+0x70>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	200b      	movs	r0, #11
 8001648:	f001 fa8b 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800164c:	200b      	movs	r0, #11
 800164e:	f001 faa4 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	203a      	movs	r0, #58	; 0x3a
 8001658:	f001 fa83 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800165c:	203a      	movs	r0, #58	; 0x3a
 800165e:	f001 fa9c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	203c      	movs	r0, #60	; 0x3c
 8001668:	f001 fa7b 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800166c:	203c      	movs	r0, #60	; 0x3c
 800166e:	f001 fa94 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MX_GPIO_Init+0xd0>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <MX_GPIO_Init+0xd0>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_GPIO_Init+0xd0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS7_Pin|CS8_Pin|CS9_Pin
 80016f4:	2200      	movs	r2, #0
 80016f6:	f24f 31e4 	movw	r1, #62436	; 0xf3e4
 80016fa:	4816      	ldr	r0, [pc, #88]	; (8001754 <MX_GPIO_Init+0xd4>)
 80016fc:	f002 f9c9 	bl	8003a92 <HAL_GPIO_WritePin>
                          |CS10_Pin|CS2_Pin|CS3_Pin|CS4_Pin
                          |CS5_Pin|CS6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWE_Pin|CSDIS_Pin|LED_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_GPIO_Init+0xd8>)
 8001708:	f002 f9c3 	bl	8003a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_Pin CS7_Pin CS8_Pin CS9_Pin
                           CS10_Pin CS2_Pin CS3_Pin CS4_Pin
                           CS5_Pin CS6_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS7_Pin|CS8_Pin|CS9_Pin
 800170c:	f24f 33e4 	movw	r3, #62436	; 0xf3e4
 8001710:	613b      	str	r3, [r7, #16]
                          |CS10_Pin|CS2_Pin|CS3_Pin|CS4_Pin
                          |CS5_Pin|CS6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <MX_GPIO_Init+0xd4>)
 8001726:	f001 ff5d 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWE_Pin CSDIS_Pin LED_Pin */
  GPIO_InitStruct.Pin = PWE_Pin|CSDIS_Pin|LED_Pin;
 800172a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_GPIO_Init+0xd8>)
 8001744:	f001 ff4e 	bl	80035e4 <HAL_GPIO_Init>

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	40010c00 	.word	0x40010c00
 8001758:	40011000 	.word	0x40011000

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>

08001766 <proce_init>:
extern UART_HandleTypeDef huart5;
extern DMA_HandleTypeDef hdma_uart4_rx;
extern DMA_HandleTypeDef hdma_uart4_tx;
uint32_t dtick;

void proce_init(){
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
    init_comm();
 800176a:	f7ff fb03 	bl	8000d74 <init_comm>
    init_thrusters();
 800176e:	f7ff fa17 	bl	8000ba0 <init_thrusters>
    adc_init();
 8001772:	f7ff fa41 	bl	8000bf8 <adc_init>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}

0800177a <proce_loop>:

void proce_loop(){
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0

	thrusters_update();
 800177e:	f7fe ff1f 	bl	80005c0 <thrusters_update>
	update_com();
 8001782:	f7ff fb23 	bl	8000dcc <update_com>
	trans_adc();
 8001786:	f7ff fa4b 	bl	8000c20 <trans_adc>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_MspInit+0x5c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_MspInit+0x5c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_MspInit+0x60>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_MspInit+0x60>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000

080017f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_ADC_MspInit+0x114>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d175      	bne.n	8001900 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001814:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_ADC_MspInit+0x118>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a3c      	ldr	r2, [pc, #240]	; (800190c <HAL_ADC_MspInit+0x118>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_ADC_MspInit+0x118>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_ADC_MspInit+0x118>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_ADC_MspInit+0x118>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <HAL_ADC_MspInit+0x118>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_ADC_MspInit+0x118>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a30      	ldr	r2, [pc, #192]	; (800190c <HAL_ADC_MspInit+0x118>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_ADC_MspInit+0x118>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_ADC_MspInit+0x118>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a2a      	ldr	r2, [pc, #168]	; (800190c <HAL_ADC_MspInit+0x118>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_ADC_MspInit+0x118>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001874:	230f      	movs	r3, #15
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001878:	2303      	movs	r3, #3
 800187a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4619      	mov	r1, r3
 8001882:	4823      	ldr	r0, [pc, #140]	; (8001910 <HAL_ADC_MspInit+0x11c>)
 8001884:	f001 feae 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001888:	23ff      	movs	r3, #255	; 0xff
 800188a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188c:	2303      	movs	r3, #3
 800188e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4619      	mov	r1, r3
 8001896:	481f      	ldr	r0, [pc, #124]	; (8001914 <HAL_ADC_MspInit+0x120>)
 8001898:	f001 fea4 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800189c:	2303      	movs	r3, #3
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a0:	2303      	movs	r3, #3
 80018a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4619      	mov	r1, r3
 80018aa:	481b      	ldr	r0, [pc, #108]	; (8001918 <HAL_ADC_MspInit+0x124>)
 80018ac:	f001 fe9a 	bl	80035e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018b2:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_ADC_MspInit+0x12c>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018da:	2220      	movs	r2, #32
 80018dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018e6:	f001 f981 	bl	8002bec <HAL_DMA_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80018f0:	f7ff ff34 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018f8:	621a      	str	r2, [r3, #32]
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_ADC_MspInit+0x128>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012400 	.word	0x40012400
 800190c:	40021000 	.word	0x40021000
 8001910:	40011000 	.word	0x40011000
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	2000018c 	.word	0x2000018c
 8001920:	40020008 	.word	0x40020008

08001924 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d114      	bne.n	8001960 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 800193c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2018      	movs	r0, #24
 8001954:	f001 f905 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001958:	2018      	movs	r0, #24
 800195a:	f001 f91e 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800195e:	e02a      	b.n	80019b6 <HAL_TIM_PWM_MspInit+0x92>
  else if(htim_pwm->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d114      	bne.n	8001994 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201c      	movs	r0, #28
 8001988:	f001 f8eb 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198c:	201c      	movs	r0, #28
 800198e:	f001 f904 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 8001992:	e010      	b.n	80019b6 <HAL_TIM_PWM_MspInit+0x92>
  else if(htim_pwm->Instance==TIM3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_TIM_PWM_MspInit+0xa4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10b      	bne.n	80019b6 <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_TIM_PWM_MspInit+0xa0>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40000400 	.word	0x40000400

080019cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_TIM_MspPostInit+0x150>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d119      	bne.n	8001a20 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	4619      	mov	r1, r3
 8001a18:	4842      	ldr	r0, [pc, #264]	; (8001b24 <HAL_TIM_MspPostInit+0x158>)
 8001a1a:	f001 fde3 	bl	80035e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a1e:	e078      	b.n	8001b12 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d144      	bne.n	8001ab4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001a5a:	f640 4308 	movw	r3, #3080	; 0xc08
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2302      	movs	r3, #2
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	482e      	ldr	r0, [pc, #184]	; (8001b28 <HAL_TIM_MspPostInit+0x15c>)
 8001a70:	f001 fdb8 	bl	80035e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	4619      	mov	r1, r3
 8001a88:	4826      	ldr	r0, [pc, #152]	; (8001b24 <HAL_TIM_MspPostInit+0x158>)
 8001a8a:	f001 fdab 	bl	80035e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_TIM_MspPostInit+0x160>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_TIM_MspPostInit+0x160>)
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	6053      	str	r3, [r2, #4]
}
 8001ab2:	e02e      	b.n	8001b12 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_TIM_MspPostInit+0x164>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d129      	bne.n	8001b12 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_TIM_MspPostInit+0x154>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480f      	ldr	r0, [pc, #60]	; (8001b28 <HAL_TIM_MspPostInit+0x15c>)
 8001aea:	f001 fd7b 	bl	80035e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_TIM_MspPostInit+0x160>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_TIM_MspPostInit+0x160>)
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	6053      	str	r3, [r2, #4]
}
 8001b12:	bf00      	nop
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40012c00 	.word	0x40012c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40000400 	.word	0x40000400

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	; (8001d00 <HAL_UART_MspInit+0x1cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	f040 8087 	bne.w	8001c64 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b56:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	4a64      	ldr	r2, [pc, #400]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6193      	str	r3, [r2, #24]
 8001b7a:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4619      	mov	r1, r3
 8001b9a:	485b      	ldr	r0, [pc, #364]	; (8001d08 <HAL_UART_MspInit+0x1d4>)
 8001b9c:	f001 fd22 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4854      	ldr	r0, [pc, #336]	; (8001d08 <HAL_UART_MspInit+0x1d4>)
 8001bb6:	f001 fd15 	bl	80035e4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8001bba:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bbc:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_UART_MspInit+0x1dc>)
 8001bbe:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001bea:	4848      	ldr	r0, [pc, #288]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bec:	f000 fffe 	bl	8002bec <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001bf6:	f7ff fdb1 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <HAL_UART_MspInit+0x1d8>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c08:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <HAL_UART_MspInit+0x1e4>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c0e:	2210      	movs	r2, #16
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c30:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001c36:	4837      	ldr	r0, [pc, #220]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c38:	f000 ffd8 	bl	8002bec <HAL_DMA_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001c42:	f7ff fd8b 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c4c:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_UART_MspInit+0x1e0>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2034      	movs	r0, #52	; 0x34
 8001c58:	f000 ff83 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c5c:	2034      	movs	r0, #52	; 0x34
 8001c5e:	f000 ff9c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001c62:	e049      	b.n	8001cf8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==UART5)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <HAL_UART_MspInit+0x1e8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d144      	bne.n	8001cf8 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001ca4:	f043 0320 	orr.w	r3, r3, #32
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_UART_MspInit+0x1d0>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <HAL_UART_MspInit+0x1d4>)
 8001ccc:	f001 fc8a 	bl	80035e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480f      	ldr	r0, [pc, #60]	; (8001d20 <HAL_UART_MspInit+0x1ec>)
 8001ce4:	f001 fc7e 	bl	80035e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2035      	movs	r0, #53	; 0x35
 8001cee:	f000 ff38 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001cf2:	2035      	movs	r0, #53	; 0x35
 8001cf4:	f000 ff51 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	; 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40004c00 	.word	0x40004c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	20000338 	.word	0x20000338
 8001d10:	40020430 	.word	0x40020430
 8001d14:	2000037c 	.word	0x2000037c
 8001d18:	40020458 	.word	0x40020458
 8001d1c:	40005000 	.word	0x40005000
 8001d20:	40011400 	.word	0x40011400

08001d24 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_UART_MspDeInit+0x7c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d118      	bne.n	8001d68 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_UART_MspDeInit+0x80>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <HAL_UART_MspDeInit+0x80>)
 8001d3c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d40:	61d3      	str	r3, [r2, #28]

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8001d42:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001d46:	4818      	ldr	r0, [pc, #96]	; (8001da8 <HAL_UART_MspDeInit+0x84>)
 8001d48:	f001 fdd0 	bl	80038ec <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 ffc1 	bl	8002cd8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 ffbc 	bl	8002cd8 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001d60:	2034      	movs	r0, #52	; 0x34
 8001d62:	f000 ff28 	bl	8002bb6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 8001d66:	e016      	b.n	8001d96 <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==UART5)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_UART_MspDeInit+0x88>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d111      	bne.n	8001d96 <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_UART5_CLK_DISABLE();
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_UART_MspDeInit+0x80>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_UART_MspDeInit+0x80>)
 8001d78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d7c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8001d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d82:	4809      	ldr	r0, [pc, #36]	; (8001da8 <HAL_UART_MspDeInit+0x84>)
 8001d84:	f001 fdb2 	bl	80038ec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <HAL_UART_MspDeInit+0x8c>)
 8001d8c:	f001 fdae 	bl	80038ec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8001d90:	2035      	movs	r0, #53	; 0x35
 8001d92:	f000 ff10 	bl	8002bb6 <HAL_NVIC_DisableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40004c00 	.word	0x40004c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40011000 	.word	0x40011000
 8001dac:	40005000 	.word	0x40005000
 8001db0:	40011400 	.word	0x40011400

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <NMI_Handler+0x4>

08001dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfa:	f000 f8bb 	bl	8001f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DMA1_Channel1_IRQHandler+0x10>)
 8001e0a:	f001 f981 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000018c 	.word	0x2000018c

08001e18 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM1_BRK_IRQHandler+0x10>)
 8001e1e:	f002 ff77 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001d0 	.word	0x200001d0

08001e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM2_IRQHandler+0x10>)
 8001e32:	f002 ff6d 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000218 	.word	0x20000218

08001e40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <UART4_IRQHandler+0x10>)
 8001e46:	f003 fd55 	bl	80058f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002a8 	.word	0x200002a8

08001e54 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <UART5_IRQHandler+0x10>)
 8001e5a:	f003 fd4b 	bl	80058f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002f0 	.word	0x200002f0

08001e68 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <DMA2_Channel3_IRQHandler+0x10>)
 8001e6e:	f001 f94f 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000338 	.word	0x20000338

08001e7c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <DMA2_Channel5_IRQHandler+0x10>)
 8001e82:	f001 f945 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000037c 	.word	0x2000037c

08001e90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
	    bl  SystemInit
 8001e9c:	f7ff fff8 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ea2:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eb8:	4c09      	ldr	r4, [pc, #36]	; (8001ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ec6:	f004 fc11 	bl	80066ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eca:	f7ff f849 	bl	8000f60 <main>
  bx lr
 8001ece:	4770      	bx	lr
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ed8:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8001edc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ee0:	200003c4 	.word	0x200003c4

08001ee4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_2_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_Init+0x28>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_Init+0x28>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 fe27 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f000 f808 	bl	8001f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fc44 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x54>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_InitTick+0x58>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fe4d 	bl	8002bd2 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d80a      	bhi.n	8001f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 fe07 	bl	8002b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_InitTick+0x5c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_IncTick+0x1c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_IncTick+0x20>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_IncTick+0x20>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000008 	.word	0x20000008
 8001f94:	200003c0 	.word	0x200003c0

08001f98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <HAL_GetTick+0x10>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	200003c0 	.word	0x200003c0

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffe0 	bl	8001f98 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0be      	b.n	8002194 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fbde 	bl	80017f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fb41 	bl	80026c0 <ADC_ConversionStop_Disable>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 8099 	bne.w	8002182 <HAL_ADC_Init+0x18e>
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8095 	bne.w	8002182 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002060:	f023 0302 	bic.w	r3, r3, #2
 8002064:	f043 0202 	orr.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002074:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7b1b      	ldrb	r3, [r3, #12]
 800207a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800207c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4313      	orrs	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208c:	d003      	beq.n	8002096 <HAL_ADC_Init+0xa2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_ADC_Init+0xa8>
 8002096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209a:	e000      	b.n	800209e <HAL_ADC_Init+0xaa>
 800209c:	2300      	movs	r3, #0
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7d1b      	ldrb	r3, [r3, #20]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d119      	bne.n	80020e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7b1b      	ldrb	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	035a      	lsls	r2, r3, #13
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e00b      	b.n	80020e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	f043 0220 	orr.w	r2, r3, #32
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_ADC_Init+0x1a8>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	430b      	orrs	r3, r1
 8002106:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002110:	d003      	beq.n	800211a <HAL_ADC_Init+0x126>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d104      	bne.n	8002124 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	3b01      	subs	r3, #1
 8002120:	051b      	lsls	r3, r3, #20
 8002122:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	430a      	orrs	r2, r1
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_ADC_Init+0x1ac>)
 8002140:	4013      	ands	r3, r2
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	429a      	cmp	r2, r3
 8002146:	d10b      	bne.n	8002160 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800215e:	e018      	b.n	8002192 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f023 0312 	bic.w	r3, r3, #18
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002180:	e007      	b.n	8002192 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002192:	7dfb      	ldrb	r3, [r7, #23]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	ffe1f7fd 	.word	0xffe1f7fd
 80021a0:	ff1f0efe 	.word	0xff1f0efe

080021a4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a64      	ldr	r2, [pc, #400]	; (800234c <HAL_ADC_Start_DMA+0x1a8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_ADC_Start_DMA+0x24>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a63      	ldr	r2, [pc, #396]	; (8002350 <HAL_ADC_Start_DMA+0x1ac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_Start_DMA+0x32>
 80021c8:	4b60      	ldr	r3, [pc, #384]	; (800234c <HAL_ADC_Start_DMA+0x1a8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 80b3 	bne.w	800233c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_Start_DMA+0x40>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0ae      	b.n	8002342 <HAL_ADC_Start_DMA+0x19e>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fa0d 	bl	800260c <ADC_Enable>
 80021f2:	4603      	mov	r3, r0
 80021f4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 809a 	bne.w	8002332 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <HAL_ADC_Start_DMA+0x1ac>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d105      	bne.n	8002228 <HAL_ADC_Start_DMA+0x84>
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_ADC_Start_DMA+0x1a8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d115      	bne.n	8002254 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d026      	beq.n	8002290 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800224a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002252:	e01d      	b.n	8002290 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_ADC_Start_DMA+0x1a8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_ADC_Start_DMA+0xd0>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <HAL_ADC_Start_DMA+0x1ac>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10d      	bne.n	8002290 <HAL_ADC_Start_DMA+0xec>
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_ADC_Start_DMA+0x1a8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002288:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	f023 0206 	bic.w	r2, r3, #6
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a25      	ldr	r2, [pc, #148]	; (8002354 <HAL_ADC_Start_DMA+0x1b0>)
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a24      	ldr	r2, [pc, #144]	; (8002358 <HAL_ADC_Start_DMA+0x1b4>)
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a23      	ldr	r2, [pc, #140]	; (800235c <HAL_ADC_Start_DMA+0x1b8>)
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0202 	mvn.w	r2, #2
 80022d8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a18      	ldr	r0, [r3, #32]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	334c      	adds	r3, #76	; 0x4c
 80022f4:	4619      	mov	r1, r3
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f000 fd65 	bl	8002dc8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002308:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800230c:	d108      	bne.n	8002320 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800231c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800231e:	e00f      	b.n	8002340 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800232e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002330:	e006      	b.n	8002340 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800233a:	e001      	b.n	8002340 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002340:	7dfb      	ldrb	r3, [r7, #23]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40012400 	.word	0x40012400
 8002350:	40012800 	.word	0x40012800
 8002354:	08002743 	.word	0x08002743
 8002358:	080027bf 	.word	0x080027bf
 800235c:	080027db 	.word	0x080027db

08002360 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_ADC_Stop_DMA+0x1a>
 8002376:	2302      	movs	r3, #2
 8002378:	e03a      	b.n	80023f0 <HAL_ADC_Stop_DMA+0x90>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f99c 	bl	80026c0 <ADC_ConversionStop_Disable>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d129      	bne.n	80023e6 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d11a      	bne.n	80023e6 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fd67 	bl	8002e88 <HAL_DMA_Abort>
 80023ba:	4603      	mov	r3, r0
 80023bc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
 80023d8:	e005      	b.n	80023e6 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x20>
 8002438:	2302      	movs	r3, #2
 800243a:	e0dc      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x1da>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b06      	cmp	r3, #6
 800244a:	d81c      	bhi.n	8002486 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	3b05      	subs	r3, #5
 800245e:	221f      	movs	r2, #31
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	4019      	ands	r1, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b05      	subs	r3, #5
 8002478:	fa00 f203 	lsl.w	r2, r0, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	635a      	str	r2, [r3, #52]	; 0x34
 8002484:	e03c      	b.n	8002500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d81c      	bhi.n	80024c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3b23      	subs	r3, #35	; 0x23
 80024a0:	221f      	movs	r2, #31
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4019      	ands	r1, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b23      	subs	r3, #35	; 0x23
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
 80024c6:	e01b      	b.n	8002500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b41      	subs	r3, #65	; 0x41
 80024da:	221f      	movs	r2, #31
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4019      	ands	r1, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b41      	subs	r3, #65	; 0x41
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b09      	cmp	r3, #9
 8002506:	d91c      	bls.n	8002542 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68d9      	ldr	r1, [r3, #12]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	3b1e      	subs	r3, #30
 800251a:	2207      	movs	r2, #7
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	4019      	ands	r1, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6898      	ldr	r0, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	3b1e      	subs	r3, #30
 8002534:	fa00 f203 	lsl.w	r2, r0, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	e019      	b.n	8002576 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6919      	ldr	r1, [r3, #16]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	2207      	movs	r2, #7
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	4019      	ands	r1, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6898      	ldr	r0, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	fa00 f203 	lsl.w	r2, r0, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d003      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002582:	2b11      	cmp	r3, #17
 8002584:	d132      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <HAL_ADC_ConfigChannel+0x1e4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d125      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d126      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d11a      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_ADC_ConfigChannel+0x1e8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <HAL_ADC_ConfigChannel+0x1ec>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0c9a      	lsrs	r2, r3, #18
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x1b2>
 80025da:	e007      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40012400 	.word	0x40012400
 8002604:	20000000 	.word	0x20000000
 8002608:	431bde83 	.word	0x431bde83

0800260c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d040      	beq.n	80026ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <ADC_Enable+0xac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <ADC_Enable+0xb0>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002648:	e002      	b.n	8002650 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3b01      	subs	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002656:	f7ff fc9f 	bl	8001f98 <HAL_GetTick>
 800265a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800265c:	e01f      	b.n	800269e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800265e:	f7ff fc9b 	bl	8001f98 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d918      	bls.n	800269e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d011      	beq.n	800269e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d1d8      	bne.n	800265e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	431bde83 	.word	0x431bde83

080026c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12e      	bne.n	8002738 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ea:	f7ff fc55 	bl	8001f98 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f0:	e01b      	b.n	800272a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026f2:	f7ff fc51 	bl	8001f98 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d914      	bls.n	800272a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10d      	bne.n	800272a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e007      	b.n	800273a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d0dc      	beq.n	80026f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002758:	2b00      	cmp	r3, #0
 800275a:	d127      	bne.n	80027ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002772:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002776:	d115      	bne.n	80027a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f7ff fe27 	bl	80023f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027aa:	e004      	b.n	80027b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fe1c 	bl	800240a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7fe fa65 	bl	8000cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_ADCEx_Calibration_Start+0x1e>
 800282a:	2302      	movs	r3, #2
 800282c:	e097      	b.n	800295e <HAL_ADCEx_Calibration_Start+0x14e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff42 	bl	80026c0 <ADC_ConversionStop_Disable>
 800283c:	4603      	mov	r3, r0
 800283e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fee3 	bl	800260c <ADC_Enable>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8081 	bne.w	8002954 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800285a:	f023 0302 	bic.w	r3, r3, #2
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_ADCEx_Calibration_Start+0x158>)
 8002868:	681c      	ldr	r4, [r3, #0]
 800286a:	2002      	movs	r0, #2
 800286c:	f001 ffb8 	bl	80047e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002870:	4603      	mov	r3, r0
 8002872:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002876:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002878:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800287a:	e002      	b.n	8002882 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3b01      	subs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0208 	orr.w	r2, r2, #8
 8002896:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002898:	f7ff fb7e 	bl	8001f98 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800289e:	e01b      	b.n	80028d8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028a0:	f7ff fb7a 	bl	8001f98 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d914      	bls.n	80028d8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f023 0312 	bic.w	r3, r3, #18
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e042      	b.n	800295e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1dc      	bne.n	80028a0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0204 	orr.w	r2, r2, #4
 80028f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028f6:	f7ff fb4f 	bl	8001f98 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028fc:	e01b      	b.n	8002936 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028fe:	f7ff fb4b 	bl	8001f98 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b0a      	cmp	r3, #10
 800290a:	d914      	bls.n	8002936 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	f023 0312 	bic.w	r3, r3, #18
 8002922:	f043 0210 	orr.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e013      	b.n	800295e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1dc      	bne.n	80028fe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f023 0303 	bic.w	r3, r3, #3
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
}
 800295e:	4618      	mov	r0, r3
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4906      	ldr	r1, [pc, #24]	; (8002a04 <__NVIC_EnableIRQ+0x34>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db12      	blt.n	8002a40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	490a      	ldr	r1, [pc, #40]	; (8002a4c <__NVIC_DisableIRQ+0x44>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	3320      	adds	r3, #32
 8002a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a34:	f3bf 8f4f 	dsb	sy
}
 8002a38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a3a:	f3bf 8f6f 	isb	sy
}
 8002a3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	; (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f7ff ff90 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff09 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff ff1e 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff90 	bl	8002aa4 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5f 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff11 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff1f 	bl	8002a08 <__NVIC_DisableIRQ>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ff94 	bl	8002b08 <SysTick_Config>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e059      	b.n	8002cb6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_DMA_Init+0xd4>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d80f      	bhi.n	8002c2e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_DMA_Init+0xd8>)
 8002c16:	4413      	add	r3, r2
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <HAL_DMA_Init+0xdc>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_Init+0xe0>)
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c2c:	e00e      	b.n	8002c4c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_DMA_Init+0xe4>)
 8002c36:	4413      	add	r3, r2
 8002c38:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <HAL_DMA_Init+0xdc>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_DMA_Init+0xe8>)
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40020407 	.word	0x40020407
 8002cc4:	bffdfff8 	.word	0xbffdfff8
 8002cc8:	cccccccd 	.word	0xcccccccd
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	bffdfbf8 	.word	0xbffdfbf8
 8002cd4:	40020400 	.word	0x40020400

08002cd8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e05c      	b.n	8002da4 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_DMA_DeInit+0xd8>)
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d80f      	bhi.n	8002d46 <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_DMA_DeInit+0xdc>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_DMA_DeInit+0xe0>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	009a      	lsls	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_DMA_DeInit+0xe4>)
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d44:	e00e      	b.n	8002d64 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_DMA_DeInit+0xe8>)
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_DMA_DeInit+0xe0>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	009a      	lsls	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_DMA_DeInit+0xec>)
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40020407 	.word	0x40020407
 8002db4:	bffdfff8 	.word	0xbffdfff8
 8002db8:	cccccccd 	.word	0xcccccccd
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	bffdfbf8 	.word	0xbffdfbf8
 8002dc4:	40020400 	.word	0x40020400

08002dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_DMA_Start_IT+0x20>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e04b      	b.n	8002e80 <HAL_DMA_Start_IT+0xb8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d13a      	bne.n	8002e72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fbb1 	bl	8003588 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 020e 	orr.w	r2, r2, #14
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e00f      	b.n	8002e60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 020a 	orr.w	r2, r2, #10
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e005      	b.n	8002e7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d008      	beq.n	8002eb2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e020      	b.n	8002ef4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 020e 	bic.w	r2, r2, #14
 8002ec0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d005      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e0d6      	b.n	80030d2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020e 	bic.w	r2, r2, #14
 8002f32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_DMA_Abort_IT+0x1dc>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d958      	bls.n	8003002 <HAL_DMA_Abort_IT+0x102>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a62      	ldr	r2, [pc, #392]	; (80030e0 <HAL_DMA_Abort_IT+0x1e0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d04f      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xfa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a61      	ldr	r2, [pc, #388]	; (80030e4 <HAL_DMA_Abort_IT+0x1e4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d048      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0xf6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5f      	ldr	r2, [pc, #380]	; (80030e8 <HAL_DMA_Abort_IT+0x1e8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d040      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0xf0>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5e      	ldr	r2, [pc, #376]	; (80030ec <HAL_DMA_Abort_IT+0x1ec>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d038      	beq.n	8002fea <HAL_DMA_Abort_IT+0xea>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_DMA_Abort_IT+0x1f0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d030      	beq.n	8002fe4 <HAL_DMA_Abort_IT+0xe4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5b      	ldr	r2, [pc, #364]	; (80030f4 <HAL_DMA_Abort_IT+0x1f4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d028      	beq.n	8002fde <HAL_DMA_Abort_IT+0xde>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a52      	ldr	r2, [pc, #328]	; (80030dc <HAL_DMA_Abort_IT+0x1dc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d020      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xd8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_DMA_Abort_IT+0x1f8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d019      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0xd4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a55      	ldr	r2, [pc, #340]	; (80030fc <HAL_DMA_Abort_IT+0x1fc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d012      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0xd0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a54      	ldr	r2, [pc, #336]	; (8003100 <HAL_DMA_Abort_IT+0x200>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00a      	beq.n	8002fca <HAL_DMA_Abort_IT+0xca>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_DMA_Abort_IT+0x204>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d102      	bne.n	8002fc4 <HAL_DMA_Abort_IT+0xc4>
 8002fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc2:	e01b      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fc8:	e018      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fce:	e015      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	e013      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e011      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fdc:	e00e      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fe2:	e00b      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe8:	e008      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fee:	e005      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff4:	e002      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	e000      	b.n	8002ffc <HAL_DMA_Abort_IT+0xfc>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_DMA_Abort_IT+0x208>)
 8002ffe:	6053      	str	r3, [r2, #4]
 8003000:	e057      	b.n	80030b2 <HAL_DMA_Abort_IT+0x1b2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a36      	ldr	r2, [pc, #216]	; (80030e0 <HAL_DMA_Abort_IT+0x1e0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d04f      	beq.n	80030ac <HAL_DMA_Abort_IT+0x1ac>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_DMA_Abort_IT+0x1e4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d048      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x1a8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <HAL_DMA_Abort_IT+0x1e8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d040      	beq.n	80030a2 <HAL_DMA_Abort_IT+0x1a2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a31      	ldr	r2, [pc, #196]	; (80030ec <HAL_DMA_Abort_IT+0x1ec>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d038      	beq.n	800309c <HAL_DMA_Abort_IT+0x19c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <HAL_DMA_Abort_IT+0x1f0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d030      	beq.n	8003096 <HAL_DMA_Abort_IT+0x196>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2e      	ldr	r2, [pc, #184]	; (80030f4 <HAL_DMA_Abort_IT+0x1f4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d028      	beq.n	8003090 <HAL_DMA_Abort_IT+0x190>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_DMA_Abort_IT+0x1dc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d020      	beq.n	800308a <HAL_DMA_Abort_IT+0x18a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2a      	ldr	r2, [pc, #168]	; (80030f8 <HAL_DMA_Abort_IT+0x1f8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d019      	beq.n	8003086 <HAL_DMA_Abort_IT+0x186>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a29      	ldr	r2, [pc, #164]	; (80030fc <HAL_DMA_Abort_IT+0x1fc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d012      	beq.n	8003082 <HAL_DMA_Abort_IT+0x182>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a27      	ldr	r2, [pc, #156]	; (8003100 <HAL_DMA_Abort_IT+0x200>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00a      	beq.n	800307c <HAL_DMA_Abort_IT+0x17c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_DMA_Abort_IT+0x204>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d102      	bne.n	8003076 <HAL_DMA_Abort_IT+0x176>
 8003070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003074:	e01b      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 8003076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800307a:	e018      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 800307c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003080:	e015      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 8003082:	2310      	movs	r3, #16
 8003084:	e013      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 8003086:	2301      	movs	r3, #1
 8003088:	e011      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 800308a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800308e:	e00e      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 8003090:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003094:	e00b      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 8003096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309a:	e008      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 800309c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a0:	e005      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 80030a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a6:	e002      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 80030a8:	2310      	movs	r3, #16
 80030aa:	e000      	b.n	80030ae <HAL_DMA_Abort_IT+0x1ae>
 80030ac:	2301      	movs	r3, #1
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_DMA_Abort_IT+0x20c>)
 80030b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
    } 
  }
  return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40020080 	.word	0x40020080
 80030e0:	40020008 	.word	0x40020008
 80030e4:	4002001c 	.word	0x4002001c
 80030e8:	40020030 	.word	0x40020030
 80030ec:	40020044 	.word	0x40020044
 80030f0:	40020058 	.word	0x40020058
 80030f4:	4002006c 	.word	0x4002006c
 80030f8:	40020408 	.word	0x40020408
 80030fc:	4002041c 	.word	0x4002041c
 8003100:	40020430 	.word	0x40020430
 8003104:	40020444 	.word	0x40020444
 8003108:	40020400 	.word	0x40020400
 800310c:	40020000 	.word	0x40020000

08003110 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2204      	movs	r2, #4
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80f1 	beq.w	800331c <HAL_DMA_IRQHandler+0x20c>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80eb 	beq.w	800331c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0204 	bic.w	r2, r2, #4
 8003162:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b5f      	ldr	r3, [pc, #380]	; (80032e8 <HAL_DMA_IRQHandler+0x1d8>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d958      	bls.n	8003222 <HAL_DMA_IRQHandler+0x112>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a5d      	ldr	r2, [pc, #372]	; (80032ec <HAL_DMA_IRQHandler+0x1dc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04f      	beq.n	800321a <HAL_DMA_IRQHandler+0x10a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_DMA_IRQHandler+0x1e0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d048      	beq.n	8003216 <HAL_DMA_IRQHandler+0x106>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5a      	ldr	r2, [pc, #360]	; (80032f4 <HAL_DMA_IRQHandler+0x1e4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d040      	beq.n	8003210 <HAL_DMA_IRQHandler+0x100>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a59      	ldr	r2, [pc, #356]	; (80032f8 <HAL_DMA_IRQHandler+0x1e8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d038      	beq.n	800320a <HAL_DMA_IRQHandler+0xfa>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a57      	ldr	r2, [pc, #348]	; (80032fc <HAL_DMA_IRQHandler+0x1ec>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d030      	beq.n	8003204 <HAL_DMA_IRQHandler+0xf4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_DMA_IRQHandler+0x1f0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d028      	beq.n	80031fe <HAL_DMA_IRQHandler+0xee>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a4d      	ldr	r2, [pc, #308]	; (80032e8 <HAL_DMA_IRQHandler+0x1d8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d020      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xe8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a52      	ldr	r2, [pc, #328]	; (8003304 <HAL_DMA_IRQHandler+0x1f4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d019      	beq.n	80031f4 <HAL_DMA_IRQHandler+0xe4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_DMA_IRQHandler+0x1f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d012      	beq.n	80031f0 <HAL_DMA_IRQHandler+0xe0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a4f      	ldr	r2, [pc, #316]	; (800330c <HAL_DMA_IRQHandler+0x1fc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00a      	beq.n	80031ea <HAL_DMA_IRQHandler+0xda>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <HAL_DMA_IRQHandler+0x200>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d102      	bne.n	80031e4 <HAL_DMA_IRQHandler+0xd4>
 80031de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031e2:	e01b      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 80031e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031e8:	e018      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	e015      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 80031f0:	2340      	movs	r3, #64	; 0x40
 80031f2:	e013      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 80031f4:	2304      	movs	r3, #4
 80031f6:	e011      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 80031f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031fc:	e00e      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 80031fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003202:	e00b      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 8003204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003208:	e008      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 800320a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800320e:	e005      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 8003210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003214:	e002      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 8003216:	2340      	movs	r3, #64	; 0x40
 8003218:	e000      	b.n	800321c <HAL_DMA_IRQHandler+0x10c>
 800321a:	2304      	movs	r3, #4
 800321c:	4a3d      	ldr	r2, [pc, #244]	; (8003314 <HAL_DMA_IRQHandler+0x204>)
 800321e:	6053      	str	r3, [r2, #4]
 8003220:	e057      	b.n	80032d2 <HAL_DMA_IRQHandler+0x1c2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a31      	ldr	r2, [pc, #196]	; (80032ec <HAL_DMA_IRQHandler+0x1dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d04f      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1bc>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_DMA_IRQHandler+0x1e0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d048      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x1b8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <HAL_DMA_IRQHandler+0x1e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d040      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x1b2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <HAL_DMA_IRQHandler+0x1e8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d038      	beq.n	80032bc <HAL_DMA_IRQHandler+0x1ac>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_DMA_IRQHandler+0x1ec>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d030      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x1a6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <HAL_DMA_IRQHandler+0x1f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d028      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x1a0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <HAL_DMA_IRQHandler+0x1d8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d020      	beq.n	80032aa <HAL_DMA_IRQHandler+0x19a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <HAL_DMA_IRQHandler+0x1f4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d019      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x196>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a24      	ldr	r2, [pc, #144]	; (8003308 <HAL_DMA_IRQHandler+0x1f8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d012      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x192>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_DMA_IRQHandler+0x1fc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00a      	beq.n	800329c <HAL_DMA_IRQHandler+0x18c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_DMA_IRQHandler+0x200>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d102      	bne.n	8003296 <HAL_DMA_IRQHandler+0x186>
 8003290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003294:	e01b      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 8003296:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800329a:	e018      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 800329c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a0:	e015      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	e013      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e011      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032ae:	e00e      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b4:	e00b      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032ba:	e008      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032c0:	e005      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c6:	e002      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032c8:	2340      	movs	r3, #64	; 0x40
 80032ca:	e000      	b.n	80032ce <HAL_DMA_IRQHandler+0x1be>
 80032cc:	2304      	movs	r3, #4
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_DMA_IRQHandler+0x208>)
 80032d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8136 	beq.w	8003548 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032e4:	e130      	b.n	8003548 <HAL_DMA_IRQHandler+0x438>
 80032e6:	bf00      	nop
 80032e8:	40020080 	.word	0x40020080
 80032ec:	40020008 	.word	0x40020008
 80032f0:	4002001c 	.word	0x4002001c
 80032f4:	40020030 	.word	0x40020030
 80032f8:	40020044 	.word	0x40020044
 80032fc:	40020058 	.word	0x40020058
 8003300:	4002006c 	.word	0x4002006c
 8003304:	40020408 	.word	0x40020408
 8003308:	4002041c 	.word	0x4002041c
 800330c:	40020430 	.word	0x40020430
 8003310:	40020444 	.word	0x40020444
 8003314:	40020400 	.word	0x40020400
 8003318:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2202      	movs	r2, #2
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80dd 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x3d8>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80d7 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020a 	bic.w	r2, r2, #10
 8003356:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b7b      	ldr	r3, [pc, #492]	; (8003554 <HAL_DMA_IRQHandler+0x444>)
 8003368:	429a      	cmp	r2, r3
 800336a:	d958      	bls.n	800341e <HAL_DMA_IRQHandler+0x30e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a79      	ldr	r2, [pc, #484]	; (8003558 <HAL_DMA_IRQHandler+0x448>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d04f      	beq.n	8003416 <HAL_DMA_IRQHandler+0x306>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a78      	ldr	r2, [pc, #480]	; (800355c <HAL_DMA_IRQHandler+0x44c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d048      	beq.n	8003412 <HAL_DMA_IRQHandler+0x302>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a76      	ldr	r2, [pc, #472]	; (8003560 <HAL_DMA_IRQHandler+0x450>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d040      	beq.n	800340c <HAL_DMA_IRQHandler+0x2fc>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <HAL_DMA_IRQHandler+0x454>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d038      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2f6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a73      	ldr	r2, [pc, #460]	; (8003568 <HAL_DMA_IRQHandler+0x458>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d030      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2f0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a72      	ldr	r2, [pc, #456]	; (800356c <HAL_DMA_IRQHandler+0x45c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d028      	beq.n	80033fa <HAL_DMA_IRQHandler+0x2ea>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a69      	ldr	r2, [pc, #420]	; (8003554 <HAL_DMA_IRQHandler+0x444>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d020      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2e4>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_DMA_IRQHandler+0x460>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d019      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x2e0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6c      	ldr	r2, [pc, #432]	; (8003574 <HAL_DMA_IRQHandler+0x464>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d012      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6b      	ldr	r2, [pc, #428]	; (8003578 <HAL_DMA_IRQHandler+0x468>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00a      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x2d6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a69      	ldr	r2, [pc, #420]	; (800357c <HAL_DMA_IRQHandler+0x46c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d102      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x2d0>
 80033da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033de:	e01b      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 80033e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e4:	e018      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 80033e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ea:	e015      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 80033ec:	2320      	movs	r3, #32
 80033ee:	e013      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e011      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 80033f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f8:	e00e      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 80033fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033fe:	e00b      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 8003400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003404:	e008      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 8003406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800340a:	e005      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 800340c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003410:	e002      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 8003412:	2320      	movs	r3, #32
 8003414:	e000      	b.n	8003418 <HAL_DMA_IRQHandler+0x308>
 8003416:	2302      	movs	r3, #2
 8003418:	4a59      	ldr	r2, [pc, #356]	; (8003580 <HAL_DMA_IRQHandler+0x470>)
 800341a:	6053      	str	r3, [r2, #4]
 800341c:	e057      	b.n	80034ce <HAL_DMA_IRQHandler+0x3be>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <HAL_DMA_IRQHandler+0x448>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d04f      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x3b8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a4b      	ldr	r2, [pc, #300]	; (800355c <HAL_DMA_IRQHandler+0x44c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d048      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x3b4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <HAL_DMA_IRQHandler+0x450>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d040      	beq.n	80034be <HAL_DMA_IRQHandler+0x3ae>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_DMA_IRQHandler+0x454>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d038      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x3a8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_DMA_IRQHandler+0x458>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d030      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x3a2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a45      	ldr	r2, [pc, #276]	; (800356c <HAL_DMA_IRQHandler+0x45c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d028      	beq.n	80034ac <HAL_DMA_IRQHandler+0x39c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <HAL_DMA_IRQHandler+0x444>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d020      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x396>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a41      	ldr	r2, [pc, #260]	; (8003570 <HAL_DMA_IRQHandler+0x460>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x392>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <HAL_DMA_IRQHandler+0x464>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d012      	beq.n	800349e <HAL_DMA_IRQHandler+0x38e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <HAL_DMA_IRQHandler+0x468>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x388>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3d      	ldr	r2, [pc, #244]	; (800357c <HAL_DMA_IRQHandler+0x46c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d102      	bne.n	8003492 <HAL_DMA_IRQHandler+0x382>
 800348c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003490:	e01b      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 8003492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003496:	e018      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 8003498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349c:	e015      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 800349e:	2320      	movs	r3, #32
 80034a0:	e013      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e011      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034aa:	e00e      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034b0:	e00b      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b6:	e008      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034bc:	e005      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c2:	e002      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034c4:	2320      	movs	r3, #32
 80034c6:	e000      	b.n	80034ca <HAL_DMA_IRQHandler+0x3ba>
 80034c8:	2302      	movs	r3, #2
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_DMA_IRQHandler+0x474>)
 80034cc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d034      	beq.n	8003548 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034e6:	e02f      	b.n	8003548 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2208      	movs	r2, #8
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d028      	beq.n	800354a <HAL_DMA_IRQHandler+0x43a>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d023      	beq.n	800354a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 020e 	bic.w	r2, r2, #14
 8003510:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
    }
  }
  return;
 8003548:	bf00      	nop
 800354a:	bf00      	nop
}
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40020080 	.word	0x40020080
 8003558:	40020008 	.word	0x40020008
 800355c:	4002001c 	.word	0x4002001c
 8003560:	40020030 	.word	0x40020030
 8003564:	40020044 	.word	0x40020044
 8003568:	40020058 	.word	0x40020058
 800356c:	4002006c 	.word	0x4002006c
 8003570:	40020408 	.word	0x40020408
 8003574:	4002041c 	.word	0x4002041c
 8003578:	40020430 	.word	0x40020430
 800357c:	40020444 	.word	0x40020444
 8003580:	40020400 	.word	0x40020400
 8003584:	40020000 	.word	0x40020000

08003588 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f202 	lsl.w	r2, r1, r2
 80035a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d108      	bne.n	80035c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035c6:	e007      	b.n	80035d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b08b      	sub	sp, #44	; 0x2c
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	e169      	b.n	80038cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035f8:	2201      	movs	r2, #1
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	429a      	cmp	r2, r3
 8003612:	f040 8158 	bne.w	80038c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a9a      	ldr	r2, [pc, #616]	; (8003884 <HAL_GPIO_Init+0x2a0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d05e      	beq.n	80036de <HAL_GPIO_Init+0xfa>
 8003620:	4a98      	ldr	r2, [pc, #608]	; (8003884 <HAL_GPIO_Init+0x2a0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d875      	bhi.n	8003712 <HAL_GPIO_Init+0x12e>
 8003626:	4a98      	ldr	r2, [pc, #608]	; (8003888 <HAL_GPIO_Init+0x2a4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d058      	beq.n	80036de <HAL_GPIO_Init+0xfa>
 800362c:	4a96      	ldr	r2, [pc, #600]	; (8003888 <HAL_GPIO_Init+0x2a4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d86f      	bhi.n	8003712 <HAL_GPIO_Init+0x12e>
 8003632:	4a96      	ldr	r2, [pc, #600]	; (800388c <HAL_GPIO_Init+0x2a8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d052      	beq.n	80036de <HAL_GPIO_Init+0xfa>
 8003638:	4a94      	ldr	r2, [pc, #592]	; (800388c <HAL_GPIO_Init+0x2a8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d869      	bhi.n	8003712 <HAL_GPIO_Init+0x12e>
 800363e:	4a94      	ldr	r2, [pc, #592]	; (8003890 <HAL_GPIO_Init+0x2ac>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d04c      	beq.n	80036de <HAL_GPIO_Init+0xfa>
 8003644:	4a92      	ldr	r2, [pc, #584]	; (8003890 <HAL_GPIO_Init+0x2ac>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d863      	bhi.n	8003712 <HAL_GPIO_Init+0x12e>
 800364a:	4a92      	ldr	r2, [pc, #584]	; (8003894 <HAL_GPIO_Init+0x2b0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d046      	beq.n	80036de <HAL_GPIO_Init+0xfa>
 8003650:	4a90      	ldr	r2, [pc, #576]	; (8003894 <HAL_GPIO_Init+0x2b0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d85d      	bhi.n	8003712 <HAL_GPIO_Init+0x12e>
 8003656:	2b12      	cmp	r3, #18
 8003658:	d82a      	bhi.n	80036b0 <HAL_GPIO_Init+0xcc>
 800365a:	2b12      	cmp	r3, #18
 800365c:	d859      	bhi.n	8003712 <HAL_GPIO_Init+0x12e>
 800365e:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <HAL_GPIO_Init+0x80>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	080036df 	.word	0x080036df
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036cb 	.word	0x080036cb
 8003670:	0800370d 	.word	0x0800370d
 8003674:	08003713 	.word	0x08003713
 8003678:	08003713 	.word	0x08003713
 800367c:	08003713 	.word	0x08003713
 8003680:	08003713 	.word	0x08003713
 8003684:	08003713 	.word	0x08003713
 8003688:	08003713 	.word	0x08003713
 800368c:	08003713 	.word	0x08003713
 8003690:	08003713 	.word	0x08003713
 8003694:	08003713 	.word	0x08003713
 8003698:	08003713 	.word	0x08003713
 800369c:	08003713 	.word	0x08003713
 80036a0:	08003713 	.word	0x08003713
 80036a4:	08003713 	.word	0x08003713
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080036d5 	.word	0x080036d5
 80036b0:	4a79      	ldr	r2, [pc, #484]	; (8003898 <HAL_GPIO_Init+0x2b4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036b6:	e02c      	b.n	8003712 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	623b      	str	r3, [r7, #32]
          break;
 80036be:	e029      	b.n	8003714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	3304      	adds	r3, #4
 80036c6:	623b      	str	r3, [r7, #32]
          break;
 80036c8:	e024      	b.n	8003714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	3308      	adds	r3, #8
 80036d0:	623b      	str	r3, [r7, #32]
          break;
 80036d2:	e01f      	b.n	8003714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	330c      	adds	r3, #12
 80036da:	623b      	str	r3, [r7, #32]
          break;
 80036dc:	e01a      	b.n	8003714 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036e6:	2304      	movs	r3, #4
 80036e8:	623b      	str	r3, [r7, #32]
          break;
 80036ea:	e013      	b.n	8003714 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036f4:	2308      	movs	r3, #8
 80036f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	611a      	str	r2, [r3, #16]
          break;
 80036fe:	e009      	b.n	8003714 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003700:	2308      	movs	r3, #8
 8003702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	615a      	str	r2, [r3, #20]
          break;
 800370a:	e003      	b.n	8003714 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800370c:	2300      	movs	r3, #0
 800370e:	623b      	str	r3, [r7, #32]
          break;
 8003710:	e000      	b.n	8003714 <HAL_GPIO_Init+0x130>
          break;
 8003712:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2bff      	cmp	r3, #255	; 0xff
 8003718:	d801      	bhi.n	800371e <HAL_GPIO_Init+0x13a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	e001      	b.n	8003722 <HAL_GPIO_Init+0x13e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	d802      	bhi.n	8003730 <HAL_GPIO_Init+0x14c>
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	e002      	b.n	8003736 <HAL_GPIO_Init+0x152>
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	3b08      	subs	r3, #8
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	210f      	movs	r1, #15
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	6a39      	ldr	r1, [r7, #32]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	431a      	orrs	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80b1 	beq.w	80038c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003764:	4b4d      	ldr	r3, [pc, #308]	; (800389c <HAL_GPIO_Init+0x2b8>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a4c      	ldr	r2, [pc, #304]	; (800389c <HAL_GPIO_Init+0x2b8>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6193      	str	r3, [r2, #24]
 8003770:	4b4a      	ldr	r3, [pc, #296]	; (800389c <HAL_GPIO_Init+0x2b8>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800377c:	4a48      	ldr	r2, [pc, #288]	; (80038a0 <HAL_GPIO_Init+0x2bc>)
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a40      	ldr	r2, [pc, #256]	; (80038a4 <HAL_GPIO_Init+0x2c0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_GPIO_Init+0x1ec>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3f      	ldr	r2, [pc, #252]	; (80038a8 <HAL_GPIO_Init+0x2c4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00d      	beq.n	80037cc <HAL_GPIO_Init+0x1e8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3e      	ldr	r2, [pc, #248]	; (80038ac <HAL_GPIO_Init+0x2c8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <HAL_GPIO_Init+0x1e4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3d      	ldr	r2, [pc, #244]	; (80038b0 <HAL_GPIO_Init+0x2cc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_GPIO_Init+0x1e0>
 80037c0:	2303      	movs	r3, #3
 80037c2:	e006      	b.n	80037d2 <HAL_GPIO_Init+0x1ee>
 80037c4:	2304      	movs	r3, #4
 80037c6:	e004      	b.n	80037d2 <HAL_GPIO_Init+0x1ee>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e002      	b.n	80037d2 <HAL_GPIO_Init+0x1ee>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_GPIO_Init+0x1ee>
 80037d0:	2300      	movs	r3, #0
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	f002 0203 	and.w	r2, r2, #3
 80037d8:	0092      	lsls	r2, r2, #2
 80037da:	4093      	lsls	r3, r2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037e2:	492f      	ldr	r1, [pc, #188]	; (80038a0 <HAL_GPIO_Init+0x2bc>)
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d006      	beq.n	800380a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	492c      	ldr	r1, [pc, #176]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]
 8003808:	e006      	b.n	8003818 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	43db      	mvns	r3, r3
 8003812:	4928      	ldr	r1, [pc, #160]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003814:	4013      	ands	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d006      	beq.n	8003832 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	4922      	ldr	r1, [pc, #136]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	60cb      	str	r3, [r1, #12]
 8003830:	e006      	b.n	8003840 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	43db      	mvns	r3, r3
 800383a:	491e      	ldr	r1, [pc, #120]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 800383c:	4013      	ands	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	4918      	ldr	r1, [pc, #96]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	43db      	mvns	r3, r3
 8003862:	4914      	ldr	r1, [pc, #80]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003864:	4013      	ands	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d021      	beq.n	80038b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	490e      	ldr	r1, [pc, #56]	; (80038b4 <HAL_GPIO_Init+0x2d0>)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
 8003880:	e021      	b.n	80038c6 <HAL_GPIO_Init+0x2e2>
 8003882:	bf00      	nop
 8003884:	10320000 	.word	0x10320000
 8003888:	10310000 	.word	0x10310000
 800388c:	10220000 	.word	0x10220000
 8003890:	10210000 	.word	0x10210000
 8003894:	10120000 	.word	0x10120000
 8003898:	10110000 	.word	0x10110000
 800389c:	40021000 	.word	0x40021000
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010800 	.word	0x40010800
 80038a8:	40010c00 	.word	0x40010c00
 80038ac:	40011000 	.word	0x40011000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_GPIO_Init+0x304>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	43db      	mvns	r3, r3
 80038c0:	4909      	ldr	r1, [pc, #36]	; (80038e8 <HAL_GPIO_Init+0x304>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	3301      	adds	r3, #1
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f47f ae8e 	bne.w	80035f8 <HAL_GPIO_Init+0x14>
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	372c      	adds	r7, #44	; 0x2c
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80038fa:	e09a      	b.n	8003a32 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 808d 	beq.w	8003a2c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003912:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <HAL_GPIO_DeInit+0x160>)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4013      	ands	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a46      	ldr	r2, [pc, #280]	; (8003a50 <HAL_GPIO_DeInit+0x164>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_GPIO_DeInit+0x78>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a45      	ldr	r2, [pc, #276]	; (8003a54 <HAL_GPIO_DeInit+0x168>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00d      	beq.n	8003960 <HAL_GPIO_DeInit+0x74>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <HAL_GPIO_DeInit+0x16c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <HAL_GPIO_DeInit+0x70>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a43      	ldr	r2, [pc, #268]	; (8003a5c <HAL_GPIO_DeInit+0x170>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <HAL_GPIO_DeInit+0x6c>
 8003954:	2303      	movs	r3, #3
 8003956:	e006      	b.n	8003966 <HAL_GPIO_DeInit+0x7a>
 8003958:	2304      	movs	r3, #4
 800395a:	e004      	b.n	8003966 <HAL_GPIO_DeInit+0x7a>
 800395c:	2302      	movs	r3, #2
 800395e:	e002      	b.n	8003966 <HAL_GPIO_DeInit+0x7a>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <HAL_GPIO_DeInit+0x7a>
 8003964:	2300      	movs	r3, #0
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	f002 0203 	and.w	r2, r2, #3
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	4093      	lsls	r3, r2
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	429a      	cmp	r2, r3
 8003974:	d132      	bne.n	80039dc <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003976:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	43db      	mvns	r3, r3
 800397e:	4938      	ldr	r1, [pc, #224]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 8003980:	4013      	ands	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	43db      	mvns	r3, r3
 800398c:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 800398e:	4013      	ands	r3, r2
 8003990:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003992:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	43db      	mvns	r3, r3
 800399a:	4931      	ldr	r1, [pc, #196]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 800399c:	4013      	ands	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80039a0:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	492d      	ldr	r1, [pc, #180]	; (8003a60 <HAL_GPIO_DeInit+0x174>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	220f      	movs	r2, #15
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80039be:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <HAL_GPIO_DeInit+0x160>)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	481f      	ldr	r0, [pc, #124]	; (8003a4c <HAL_GPIO_DeInit+0x160>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	400a      	ands	r2, r1
 80039d6:	3302      	adds	r3, #2
 80039d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2bff      	cmp	r3, #255	; 0xff
 80039e0:	d801      	bhi.n	80039e6 <HAL_GPIO_DeInit+0xfa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	e001      	b.n	80039ea <HAL_GPIO_DeInit+0xfe>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2bff      	cmp	r3, #255	; 0xff
 80039f0:	d802      	bhi.n	80039f8 <HAL_GPIO_DeInit+0x10c>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	e002      	b.n	80039fe <HAL_GPIO_DeInit+0x112>
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3b08      	subs	r3, #8
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	210f      	movs	r1, #15
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	401a      	ands	r2, r3
 8003a10:	2104      	movs	r1, #4
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	401a      	ands	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f af5e 	bne.w	80038fc <HAL_GPIO_DeInit+0x10>
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40010800 	.word	0x40010800
 8003a54:	40010c00 	.word	0x40010c00
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40011400 	.word	0x40011400
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	e001      	b.n	8003a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	807b      	strh	r3, [r7, #2]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa2:	787b      	ldrb	r3, [r7, #1]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aae:	e003      	b.n	8003ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	041a      	lsls	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	611a      	str	r2, [r3, #16]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	041a      	lsls	r2, r3, #16
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43d9      	mvns	r1, r3
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	611a      	str	r2, [r3, #16]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e304      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8087 	beq.w	8003c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d00c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b20:	4b8f      	ldr	r3, [pc, #572]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d112      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5e>
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x12c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d168      	bne.n	8003c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e2de      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x76>
 8003b5c:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7f      	ldr	r2, [pc, #508]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e02e      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x98>
 8003b72:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7a      	ldr	r2, [pc, #488]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a77      	ldr	r2, [pc, #476]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xbc>
 8003b96:	4b72      	ldr	r3, [pc, #456]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a71      	ldr	r2, [pc, #452]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003bb0:	4b6b      	ldr	r3, [pc, #428]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f9e2 	bl	8001f98 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe f9de 	bl	8001f98 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e292      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe4>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe f9ce 	bl	8001f98 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe f9ca 	bl	8001f98 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e27e      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x10c>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d063      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c2e:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x18c>
 8003c46:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e252      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4939      	ldr	r1, [pc, #228]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e03a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f983 	bl	8001f98 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe f97f 	bl	8001f98 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e233      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4927      	ldr	r1, [pc, #156]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe f962 	bl	8001f98 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fe f95e 	bl	8001f98 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e212      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03a      	beq.n	8003d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fe f942 	bl	8001f98 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fe f93e 	bl	8001f98 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f2      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f000 fc02 	bl	8004540 <RCC_Delay>
 8003d3c:	e01c      	b.n	8003d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7fe f928 	bl	8001f98 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4a:	e00f      	b.n	8003d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fe f924 	bl	8001f98 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d908      	bls.n	8003d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1d8      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	42420000 	.word	0x42420000
 8003d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b9b      	ldr	r3, [pc, #620]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e9      	bne.n	8003d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a6 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10d      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	4b91      	ldr	r3, [pc, #580]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	4a90      	ldr	r2, [pc, #576]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da0:	61d3      	str	r3, [r2, #28]
 8003da2:	4b8e      	ldr	r3, [pc, #568]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b8b      	ldr	r3, [pc, #556]	; (8003fe0 <HAL_RCC_OscConfig+0x4ec>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dbe:	4b88      	ldr	r3, [pc, #544]	; (8003fe0 <HAL_RCC_OscConfig+0x4ec>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a87      	ldr	r2, [pc, #540]	; (8003fe0 <HAL_RCC_OscConfig+0x4ec>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7fe f8e5 	bl	8001f98 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fe f8e1 	bl	8001f98 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e195      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b7e      	ldr	r3, [pc, #504]	; (8003fe0 <HAL_RCC_OscConfig+0x4ec>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x312>
 8003df8:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a77      	ldr	r2, [pc, #476]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x334>
 8003e0e:	4b73      	ldr	r3, [pc, #460]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a72      	ldr	r2, [pc, #456]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a6f      	ldr	r2, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	e01c      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x356>
 8003e30:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a69      	ldr	r2, [pc, #420]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6213      	str	r3, [r2, #32]
 8003e3c:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a66      	ldr	r2, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e4a:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6213      	str	r3, [r2, #32]
 8003e56:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4a60      	ldr	r2, [pc, #384]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe f895 	bl	8001f98 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fe f891 	bl	8001f98 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e143      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	4b54      	ldr	r3, [pc, #336]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCC_OscConfig+0x37e>
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e96:	f7fe f87f 	bl	8001f98 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fe f87b 	bl	8001f98 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e12d      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808c 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d10e      	bne.n	8003f08 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003eea:	4b3c      	ldr	r3, [pc, #240]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e103      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d14e      	bne.n	8003fae <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003f10:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0ef      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003f30:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCC_OscConfig+0x4f0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fe f82f 	bl	8001f98 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f3e:	f7fe f82b 	bl	8001f98 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0df      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003f50:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	491c      	ldr	r1, [pc, #112]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4918      	ldr	r1, [pc, #96]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_RCC_OscConfig+0x4f0>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe f807 	bl	8001f98 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f8e:	f7fe f803 	bl	8001f98 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b64      	cmp	r3, #100	; 0x64
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0b7      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x49a>
 8003fac:	e022      	b.n	8003ff4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_RCC_OscConfig+0x4e8>)
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCC_OscConfig+0x4f0>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd ffea 	bl	8001f98 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fc8:	f7fd ffe6 	bl	8001f98 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e09a      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e9      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8088 	beq.w	800410e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d068      	beq.n	80040dc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d14d      	bne.n	80040ae <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCC_OscConfig+0x628>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd ffbe 	bl	8001f98 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd ffba 	bl	8001f98 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e06e      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d10f      	bne.n	8004068 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4931      	ldr	r1, [pc, #196]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 8004052:	4313      	orrs	r3, r2
 8004054:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004056:	4b30      	ldr	r3, [pc, #192]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f023 020f 	bic.w	r2, r3, #15
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	492d      	ldr	r1, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 8004064:	4313      	orrs	r3, r2
 8004066:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	430b      	orrs	r3, r1
 800407a:	4927      	ldr	r1, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x628>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fd ff87 	bl	8001f98 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408e:	f7fd ff83 	bl	8001f98 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e037      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x59a>
 80040ac:	e02f      	b.n	800410e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x628>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd ff70 	bl	8001f98 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd ff6c 	bl	8001f98 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e020      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x5c8>
 80040da:	e018      	b.n	800410e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e013      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x624>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d106      	bne.n	800410a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	42420060 	.word	0x42420060

08004120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0d0      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d910      	bls.n	8004164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b67      	ldr	r3, [pc, #412]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 0207 	bic.w	r2, r3, #7
 800414a:	4965      	ldr	r1, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800419e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d040      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d115      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e073      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06b      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4936      	ldr	r1, [pc, #216]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fd fec2 	bl	8001f98 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fd febe 	bl	8001f98 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e053      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d210      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 0207 	bic.w	r2, r3, #7
 8004256:	4922      	ldr	r1, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1cc>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1d0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fe20 	bl	8001f14 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08006778 	.word	0x08006778
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004

080042f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b092      	sub	sp, #72	; 0x48
 80042fa:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004300:	2300      	movs	r3, #0
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
 8004304:	2300      	movs	r3, #0
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004318:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d002      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x3a>
 8004328:	2b08      	cmp	r3, #8
 800432a:	d003      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x40>
 800432c:	e0c3      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800432e:	4b67      	ldr	r3, [pc, #412]	; (80044cc <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004332:	e0c3      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004336:	0c9b      	lsrs	r3, r3, #18
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	4b64      	ldr	r3, [pc, #400]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80ac 	beq.w	80044a6 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800434e:	4b5e      	ldr	r3, [pc, #376]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4b5f      	ldr	r3, [pc, #380]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004358:	5c9b      	ldrb	r3, [r3, r2]
 800435a:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800435c:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 808c 	beq.w	8004482 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800436a:	4b57      	ldr	r3, [pc, #348]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	3301      	adds	r3, #1
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004378:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	3302      	adds	r3, #2
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	2200      	movs	r2, #0
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	627a      	str	r2, [r7, #36]	; 0x24
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	2200      	movs	r2, #0
 8004392:	4618      	mov	r0, r3
 8004394:	4611      	mov	r1, r2
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	fb00 f203 	mul.w	r2, r0, r3
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	fb03 f301 	mul.w	r3, r3, r1
 80043a2:	4413      	add	r3, r2
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	fba2 4500 	umull	r4, r5, r2, r0
 80043aa:	442b      	add	r3, r5
 80043ac:	461d      	mov	r5, r3
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	0159      	lsls	r1, r3, #5
 80043bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c0:	0150      	lsls	r0, r2, #5
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	ebb2 0a04 	subs.w	sl, r2, r4
 80043ca:	eb63 0b05 	sbc.w	fp, r3, r5
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e2:	ebb2 080a 	subs.w	r8, r2, sl
 80043e6:	eb63 090b 	sbc.w	r9, r3, fp
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	eb18 0304 	adds.w	r3, r8, r4
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	eb49 0305 	adc.w	r3, r9, r5
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441a:	4629      	mov	r1, r5
 800441c:	024b      	lsls	r3, r1, #9
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	4604      	mov	r4, r0
 8004424:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004428:	4601      	mov	r1, r0
 800442a:	024a      	lsls	r2, r1, #9
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	2200      	movs	r2, #0
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	617a      	str	r2, [r7, #20]
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	2200      	movs	r2, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	60fa      	str	r2, [r7, #12]
 8004440:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004444:	4622      	mov	r2, r4
 8004446:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800444a:	4645      	mov	r5, r8
 800444c:	fb05 f202 	mul.w	r2, r5, r2
 8004450:	46cc      	mov	ip, r9
 8004452:	4625      	mov	r5, r4
 8004454:	461c      	mov	r4, r3
 8004456:	4623      	mov	r3, r4
 8004458:	fb03 f30c 	mul.w	r3, r3, ip
 800445c:	4413      	add	r3, r2
 800445e:	4622      	mov	r2, r4
 8004460:	4644      	mov	r4, r8
 8004462:	fba2 2404 	umull	r2, r4, r2, r4
 8004466:	61fc      	str	r4, [r7, #28]
 8004468:	61ba      	str	r2, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004474:	f7fb fed6 	bl	8000224 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
 8004480:	e007      	b.n	8004492 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004486:	fb03 f202 	mul.w	r2, r3, r2
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004494:	7b5b      	ldrb	r3, [r3, #13]
 8004496:	461a      	mov	r2, r3
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	647b      	str	r3, [r7, #68]	; 0x44
 80044a4:	e004      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a8:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80044b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80044b4:	e002      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetSysClockFreq+0x1d8>)
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80044ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3748      	adds	r7, #72	; 0x48
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	007a1200 	.word	0x007a1200
 80044d0:	08006790 	.word	0x08006790
 80044d4:	080067a0 	.word	0x080067a0
 80044d8:	003d0900 	.word	0x003d0900

080044dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b02      	ldr	r3, [pc, #8]	; (80044ec <HAL_RCC_GetHCLKFreq+0x10>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	20000000 	.word	0x20000000

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f4:	f7ff fff2 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	08006788 	.word	0x08006788

08004518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800451c:	f7ff ffde 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	0adb      	lsrs	r3, r3, #11
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <HAL_RCC_GetPCLK2Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	08006788 	.word	0x08006788

08004540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <RCC_Delay+0x34>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <RCC_Delay+0x38>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0a5b      	lsrs	r3, r3, #9
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800455c:	bf00      	nop
  }
  while (Delay --);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f9      	bne.n	800455c <RCC_Delay+0x1c>
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	20000000 	.word	0x20000000
 8004578:	10624dd3 	.word	0x10624dd3

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d07d      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 800459c:	2300      	movs	r3, #0
 800459e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a0:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ac:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4a87      	ldr	r2, [pc, #540]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	61d3      	str	r3, [r2, #28]
 80045b8:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b82      	ldr	r3, [pc, #520]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d118      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d4:	4b7f      	ldr	r3, [pc, #508]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a7e      	ldr	r2, [pc, #504]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e0:	f7fd fcda 	bl	8001f98 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e8:	f7fd fcd6 	bl	8001f98 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0e5      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b76      	ldr	r3, [pc, #472]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004606:	4b72      	ldr	r3, [pc, #456]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02e      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d027      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462e:	4b6a      	ldr	r3, [pc, #424]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004634:	4b68      	ldr	r3, [pc, #416]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800463a:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d014      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fd fca5 	bl	8001f98 <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	e00a      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fd fca1 	bl	8001f98 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0ae      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ee      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004674:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4953      	ldr	r1, [pc, #332]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004682:	4313      	orrs	r3, r2
 8004684:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004686:	7efb      	ldrb	r3, [r7, #27]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4a4f      	ldr	r2, [pc, #316]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046a4:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4947      	ldr	r1, [pc, #284]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80046c2:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4940      	ldr	r1, [pc, #256]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80046e0:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	4938      	ldr	r1, [pc, #224]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80046f2:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80046fe:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d148      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d138      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e042      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	4920      	ldr	r1, [pc, #128]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800474e:	4313      	orrs	r3, r2
 8004750:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004752:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	491c      	ldr	r1, [pc, #112]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004760:	4313      	orrs	r3, r2
 8004762:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fd fc15 	bl	8001f98 <HAL_GetTick>
 800476e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004772:	f7fd fc11 	bl	8001f98 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b64      	cmp	r3, #100	; 0x64
 800477e:	d901      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e020      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004784:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004790:	e009      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e00f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4904      	ldr	r1, [pc, #16]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42420440 	.word	0x42420440
 80047dc:	42420070 	.word	0x42420070

080047e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	2300      	movs	r3, #0
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	2300      	movs	r3, #0
 80047f2:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3b01      	subs	r3, #1
 800480c:	2b0f      	cmp	r3, #15
 800480e:	f200 811e 	bhi.w	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	080049cd 	.word	0x080049cd
 800481c:	08004a33 	.word	0x08004a33
 8004820:	08004a4f 	.word	0x08004a4f
 8004824:	0800492b 	.word	0x0800492b
 8004828:	08004a4f 	.word	0x08004a4f
 800482c:	08004a4f 	.word	0x08004a4f
 8004830:	08004a4f 	.word	0x08004a4f
 8004834:	0800497d 	.word	0x0800497d
 8004838:	08004a4f 	.word	0x08004a4f
 800483c:	08004a4f 	.word	0x08004a4f
 8004840:	08004a4f 	.word	0x08004a4f
 8004844:	08004a4f 	.word	0x08004a4f
 8004848:	08004a4f 	.word	0x08004a4f
 800484c:	08004a4f 	.word	0x08004a4f
 8004850:	08004a4f 	.word	0x08004a4f
 8004854:	08004859 	.word	0x08004859
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004858:	4b84      	ldr	r3, [pc, #528]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800485e:	4b83      	ldr	r3, [pc, #524]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80f3 	beq.w	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	0c9b      	lsrs	r3, r3, #18
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	4a7e      	ldr	r2, [pc, #504]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004876:	5cd3      	ldrb	r3, [r2, r3]
 8004878:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d03b      	beq.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004884:	4b79      	ldr	r3, [pc, #484]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	4a79      	ldr	r2, [pc, #484]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01c      	beq.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800489e:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80048ac:	4b6f      	ldr	r3, [pc, #444]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	0a1b      	lsrs	r3, r3, #8
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3302      	adds	r3, #2
 80048b8:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 80048ba:	4a6f      	ldr	r2, [pc, #444]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	fb03 f202 	mul.w	r2, r3, r2
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	fb02 f303 	mul.w	r3, r2, r3
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
 80048d6:	e007      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048d8:	4a67      	ldr	r2, [pc, #412]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80048e8:	4b61      	ldr	r3, [pc, #388]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80048ea:	7b5b      	ldrb	r3, [r3, #13]
 80048ec:	461a      	mov	r2, r3
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d108      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4a5f      	ldr	r2, [pc, #380]	; (8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8004906:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004912:	d102      	bne.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004918:	e09b      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
          frequency = (2 * pllclk) / 3;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	623b      	str	r3, [r7, #32]
      break;
 8004928:	e093      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800492a:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004936:	f7ff fcdd 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800493a:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800493c:	e08b      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8085 	beq.w	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800494c:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800495a:	4b44      	ldr	r3, [pc, #272]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	0b1b      	lsrs	r3, r3, #12
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	3302      	adds	r3, #2
 8004966:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8004968:	4a43      	ldr	r2, [pc, #268]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	623b      	str	r3, [r7, #32]
      break;
 800497a:	e06c      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004988:	f7ff fcb4 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800498c:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800498e:	e064      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8004990:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05e      	beq.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80049aa:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	0b1b      	lsrs	r3, r3, #12
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	3302      	adds	r3, #2
 80049b6:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80049b8:	4a2f      	ldr	r2, [pc, #188]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	623b      	str	r3, [r7, #32]
      break;
 80049ca:	e046      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049dc:	d108      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 80049e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	e01f      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fa:	d109      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8004a08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d120      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01a      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      {
        frequency = HSE_VALUE / 128U;
 8004a28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a2c:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004a2e:	e016      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a32:	f7ff fd71 	bl	8004518 <HAL_RCC_GetPCLK2Freq>
 8004a36:	4602      	mov	r2, r0
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	0b9b      	lsrs	r3, r3, #14
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	3301      	adds	r3, #1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	623b      	str	r3, [r7, #32]
      break;
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    }
    default:
    {
      break;
 8004a4e:	bf00      	nop
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
      break;
 8004a52:	bf00      	nop
 8004a54:	e004      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
      break;
 8004a5e:	bf00      	nop
    }
  }
  return (frequency);
 8004a60:	6a3b      	ldr	r3, [r7, #32]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	080067b0 	.word	0x080067b0
 8004a74:	080067c0 	.word	0x080067c0
 8004a78:	007a1200 	.word	0x007a1200
 8004a7c:	003d0900 	.word	0x003d0900
 8004a80:	aaaaaaab 	.word	0xaaaaaaab

08004a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc ff3a 	bl	8001924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fb1c 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_TIM_PWM_Start_IT+0x28>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e022      	b.n	8004b92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d109      	bne.n	8004b66 <HAL_TIM_PWM_Start_IT+0x42>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e015      	b.n	8004b92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d109      	bne.n	8004b80 <HAL_TIM_PWM_Start_IT+0x5c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e008      	b.n	8004b92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0ae      	b.n	8004cf8 <HAL_TIM_PWM_Start_IT+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start_IT+0x86>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	e013      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0xae>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start_IT+0x96>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	e00b      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0xae>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start_IT+0xa6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc8:	e003      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0xae>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d841      	bhi.n	8004c5c <HAL_TIM_PWM_Start_IT+0x138>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c5d 	.word	0x08004c5d
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004c5d 	.word	0x08004c5d
 8004c10:	08004c4b 	.word	0x08004c4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0202 	orr.w	r2, r2, #2
 8004c22:	60da      	str	r2, [r3, #12]
      break;
 8004c24:	e01d      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0204 	orr.w	r2, r2, #4
 8004c34:	60da      	str	r2, [r3, #12]
      break;
 8004c36:	e014      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	60da      	str	r2, [r3, #12]
      break;
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0210 	orr.w	r2, r2, #16
 8004c58:	60da      	str	r2, [r3, #12]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d146      	bne.n	8004cf6 <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fc39 	bl	80054e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d107      	bne.n	8004c90 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_TIM_PWM_Start_IT+0x19e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_TIM_PWM_Start_IT+0x19e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_PWM_Start_IT+0x19e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_PWM_Start_IT+0x19e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d111      	bne.n	8004ce6 <HAL_TIM_PWM_Start_IT+0x1c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b06      	cmp	r3, #6
 8004cd2:	d010      	beq.n	8004cf6 <HAL_TIM_PWM_Start_IT+0x1d2>
      {
        __HAL_TIM_ENABLE(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce4:	e007      	b.n	8004cf6 <HAL_TIM_PWM_Start_IT+0x1d2>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00

08004d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0202 	mvn.w	r2, #2
 8004d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9b8 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f9ab 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f9ba 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0204 	mvn.w	r2, #4
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f98e 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f981 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f990 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0208 	mvn.w	r2, #8
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f964 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f957 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f966 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0210 	mvn.w	r2, #16
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f93a 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f92d 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f93c 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0201 	mvn.w	r2, #1
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f908 	bl	80050a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fbf8 	bl	80056b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f900 	bl	80050ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0220 	mvn.w	r2, #32
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fbc3 	bl	800569e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e0ae      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	f200 809f 	bhi.w	800508c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	0800508d 	.word	0x0800508d
 8004f5c:	0800508d 	.word	0x0800508d
 8004f60:	0800508d 	.word	0x0800508d
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	0800508d 	.word	0x0800508d
 8004f6c:	0800508d 	.word	0x0800508d
 8004f70:	0800508d 	.word	0x0800508d
 8004f74:	0800500b 	.word	0x0800500b
 8004f78:	0800508d 	.word	0x0800508d
 8004f7c:	0800508d 	.word	0x0800508d
 8004f80:	0800508d 	.word	0x0800508d
 8004f84:	0800504b 	.word	0x0800504b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f922 	bl	80051d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	619a      	str	r2, [r3, #24]
      break;
 8004fc6:	e064      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f968 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	619a      	str	r2, [r3, #24]
      break;
 8005008:	e043      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f9b1 	bl	8005378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0208 	orr.w	r2, r2, #8
 8005024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0204 	bic.w	r2, r2, #4
 8005034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	61da      	str	r2, [r3, #28]
      break;
 8005048:	e023      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9fb 	bl	800544c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	021a      	lsls	r2, r3, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	61da      	str	r2, [r3, #28]
      break;
 800508a:	e002      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
	...

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2d      	ldr	r2, [pc, #180]	; (80051c8 <TIM_Base_SetConfig+0xc8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_Base_SetConfig+0xcc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0xd0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <TIM_Base_SetConfig+0xd4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <TIM_Base_SetConfig+0xc8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_Base_SetConfig+0x72>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d00b      	beq.n	8005172 <TIM_Base_SetConfig+0x72>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <TIM_Base_SetConfig+0xcc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_Base_SetConfig+0x72>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <TIM_Base_SetConfig+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0x72>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <TIM_Base_SetConfig+0xd4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <TIM_Base_SetConfig+0xc8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00

080051d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 0201 	bic.w	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 0302 	bic.w	r3, r3, #2
 8005220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <TIM_OC1_SetConfig+0xc8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0308 	bic.w	r3, r3, #8
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <TIM_OC1_SetConfig+0xc8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f023 0210 	bic.w	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <TIM_OC2_SetConfig+0xd0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10d      	bne.n	8005320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a14      	ldr	r2, [pc, #80]	; (8005374 <TIM_OC2_SetConfig+0xd0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00

08005378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <TIM_OC3_SetConfig+0xd0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10d      	bne.n	80053f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <TIM_OC3_SetConfig+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d113      	bne.n	8005422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00

0800544c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0f      	ldr	r2, [pc, #60]	; (80054e4 <TIM_OC4_SetConfig+0x98>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d109      	bne.n	80054c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00

080054e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2201      	movs	r2, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1a      	ldr	r2, [r3, #32]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	43db      	mvns	r3, r3
 800550a:	401a      	ands	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e04b      	b.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a19      	ldr	r2, [pc, #100]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d00e      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d009      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10c      	bne.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00

080055fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005614:	2302      	movs	r3, #2
 8005616:	e03d      	b.n	8005694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e042      	b.n	800575a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fc fa23 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005704:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 ff62 	bl	80065d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800573a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e024      	b.n	80057be <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2224      	movs	r2, #36	; 0x24
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800578a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fc fac9 	bl	8001d24 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d156      	bne.n	8005890 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_UART_Transmit_DMA+0x26>
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e04f      	b.n	8005892 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2221      	movs	r2, #33	; 0x21
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <HAL_UART_Transmit_DMA+0xd4>)
 8005818:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <HAL_UART_Transmit_DMA+0xd8>)
 8005820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_UART_Transmit_DMA+0xdc>)
 8005828:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	2200      	movs	r2, #0
 8005830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	6819      	ldr	r1, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3304      	adds	r3, #4
 8005846:	461a      	mov	r2, r3
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	f7fd fabd 	bl	8002dc8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005856:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	617b      	str	r3, [r7, #20]
   return(result);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005878:	627a      	str	r2, [r7, #36]	; 0x24
 800587a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6a39      	ldr	r1, [r7, #32]
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	61fb      	str	r3, [r7, #28]
   return(result);
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08005e65 	.word	0x08005e65
 80058a0:	08005eff 	.word	0x08005eff
 80058a4:	08006083 	.word	0x08006083

080058a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d112      	bne.n	80058e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_UART_Receive_DMA+0x26>
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e00b      	b.n	80058ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	461a      	mov	r2, r3
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fc1a 	bl	8006118 <UART_Start_Receive_DMA>
 80058e4:	4603      	mov	r3, r0
 80058e6:	e000      	b.n	80058ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0ba      	sub	sp, #232	; 0xe8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10f      	bne.n	800595a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_UART_IRQHandler+0x66>
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fd7e 	bl	8006454 <UART_Receive_IT>
      return;
 8005958:	e25b      	b.n	8005e12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800595a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80de 	beq.w	8005b20 <HAL_UART_IRQHandler+0x22c>
 8005964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80d1 	beq.w	8005b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xae>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xd2>
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f043 0202 	orr.w	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0xf6>
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d011      	beq.n	8005a1a <HAL_UART_IRQHandler+0x126>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d105      	bne.n	8005a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	f043 0208 	orr.w	r2, r3, #8
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 81f2 	beq.w	8005e08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_UART_IRQHandler+0x14e>
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fd09 	bl	8006454 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <HAL_UART_IRQHandler+0x17a>
 8005a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d04f      	beq.n	8005b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fc13 	bl	800629a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d041      	beq.n	8005b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1d9      	bne.n	8005a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	4a7e      	ldr	r2, [pc, #504]	; (8005cd4 <HAL_UART_IRQHandler+0x3e0>)
 8005adc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fd fa0c 	bl	8002f00 <HAL_DMA_Abort_IT>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e00e      	b.n	8005b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb f946 	bl	8000d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e00a      	b.n	8005b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb f942 	bl	8000d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e006      	b.n	8005b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb f93e 	bl	8000d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b1a:	e175      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	bf00      	nop
    return;
 8005b1e:	e173      	b.n	8005e08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	f040 814f 	bne.w	8005dc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8148 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8141 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80b6 	beq.w	8005cd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8145 	beq.w	8005e0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	f080 813e 	bcs.w	8005e0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	f000 8088 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bd0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1d9      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3314      	adds	r3, #20
 8005bf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3314      	adds	r3, #20
 8005c10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e1      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3314      	adds	r3, #20
 8005c32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e3      	bne.n	8005c2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c84:	f023 0310 	bic.w	r3, r3, #16
 8005c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	330c      	adds	r3, #12
 8005c92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c96:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd f8ea 	bl	8002e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8bf 	bl	8005e4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cd0:	e09c      	b.n	8005e0c <HAL_UART_IRQHandler+0x518>
 8005cd2:	bf00      	nop
 8005cd4:	0800635f 	.word	0x0800635f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 808e 	beq.w	8005e10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8089 	beq.w	8005e10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d22:	647a      	str	r2, [r7, #68]	; 0x44
 8005d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e3      	bne.n	8005cfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	623b      	str	r3, [r7, #32]
   return(result);
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005da0:	61fa      	str	r2, [r7, #28]
 8005da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e3      	bne.n	8005d7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f844 	bl	8005e4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dc6:	e023      	b.n	8005e10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <HAL_UART_IRQHandler+0x4f4>
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fad0 	bl	8006386 <UART_Transmit_IT>
    return;
 8005de6:	e014      	b.n	8005e12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <HAL_UART_IRQHandler+0x51e>
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fb0f 	bl	8006424 <UART_EndTransmit_IT>
    return;
 8005e06:	e004      	b.n	8005e12 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e08:	bf00      	nop
 8005e0a:	e002      	b.n	8005e12 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e10:	bf00      	nop
  }
}
 8005e12:	37e8      	adds	r7, #232	; 0xe8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b090      	sub	sp, #64	; 0x40
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d137      	bne.n	8005ef0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	2200      	movs	r2, #0
 8005e84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	623b      	str	r3, [r7, #32]
   return(result);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eda:	61fa      	str	r2, [r7, #28]
 8005edc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	69b9      	ldr	r1, [r7, #24]
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eee:	e002      	b.n	8005ef6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005ef0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ef2:	f7ff ff91 	bl	8005e18 <HAL_UART_TxCpltCallback>
}
 8005ef6:	bf00      	nop
 8005ef8:	3740      	adds	r7, #64	; 0x40
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff ff8c 	bl	8005e2a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b09c      	sub	sp, #112	; 0x70
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d172      	bne.n	800601c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	2200      	movs	r2, #0
 8005f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3314      	adds	r3, #20
 8005f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	667b      	str	r3, [r7, #100]	; 0x64
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f90:	647a      	str	r2, [r7, #68]	; 0x44
 8005f92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3314      	adds	r3, #20
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fba:	663b      	str	r3, [r7, #96]	; 0x60
 8005fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e5      	bne.n	8005fa4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d119      	bne.n	800601c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006008:	61fa      	str	r2, [r7, #28]
 800600a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	617b      	str	r3, [r7, #20]
   return(result);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	2200      	movs	r2, #0
 8006020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	2b01      	cmp	r3, #1
 8006028:	d106      	bne.n	8006038 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800602e:	4619      	mov	r1, r3
 8006030:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006032:	f7ff ff0c 	bl	8005e4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006036:	e002      	b.n	800603e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006038:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800603a:	f7fa ff37 	bl	8000eac <HAL_UART_RxCpltCallback>
}
 800603e:	bf00      	nop
 8006040:	3770      	adds	r7, #112	; 0x70
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	2b01      	cmp	r3, #1
 8006060:	d108      	bne.n	8006074 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	b29b      	uxth	r3, r3
 800606a:	4619      	mov	r1, r3
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff feee 	bl	8005e4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006072:	e002      	b.n	800607a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fee1 	bl	8005e3c <HAL_UART_RxHalfCpltCallback>
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf14      	ite	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	2300      	moveq	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b21      	cmp	r3, #33	; 0x21
 80060b4:	d108      	bne.n	80060c8 <UART_DMAError+0x46>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060c2:	68b8      	ldr	r0, [r7, #8]
 80060c4:	f000 f8c2 	bl	800624c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bf14      	ite	ne
 80060d6:	2301      	movne	r3, #1
 80060d8:	2300      	moveq	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b22      	cmp	r3, #34	; 0x22
 80060e8:	d108      	bne.n	80060fc <UART_DMAError+0x7a>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	f000 f8cf 	bl	800629a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	f043 0210 	orr.w	r2, r3, #16
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006108:	68b8      	ldr	r0, [r7, #8]
 800610a:	f7fa fe41 	bl	8000d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b098      	sub	sp, #96	; 0x60
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	88fa      	ldrh	r2, [r7, #6]
 8006130:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2222      	movs	r2, #34	; 0x22
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	4a3e      	ldr	r2, [pc, #248]	; (8006240 <UART_Start_Receive_DMA+0x128>)
 8006146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	4a3d      	ldr	r2, [pc, #244]	; (8006244 <UART_Start_Receive_DMA+0x12c>)
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	4a3c      	ldr	r2, [pc, #240]	; (8006248 <UART_Start_Receive_DMA+0x130>)
 8006156:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615c:	2200      	movs	r2, #0
 800615e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006160:	f107 0308 	add.w	r3, r7, #8
 8006164:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	f7fc fe26 	bl	8002dc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d019      	beq.n	80061ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80061c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3314      	adds	r3, #20
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	657b      	str	r3, [r7, #84]	; 0x54
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3314      	adds	r3, #20
 80061ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	617b      	str	r3, [r7, #20]
   return(result);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006218:	653b      	str	r3, [r7, #80]	; 0x50
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006222:	627a      	str	r2, [r7, #36]	; 0x24
 8006224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6a39      	ldr	r1, [r7, #32]
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3760      	adds	r7, #96	; 0x60
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	08005f1b 	.word	0x08005f1b
 8006244:	08006047 	.word	0x08006047
 8006248:	08006083 	.word	0x08006083

0800624c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	60bb      	str	r3, [r7, #8]
   return(result);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	61ba      	str	r2, [r7, #24]
 8006276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	613b      	str	r3, [r7, #16]
   return(result);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e5      	bne.n	8006254 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006290:	bf00      	nop
 8006292:	3724      	adds	r7, #36	; 0x24
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800629a:	b480      	push	{r7}
 800629c:	b095      	sub	sp, #84	; 0x54
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	330c      	adds	r3, #12
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062c2:	643a      	str	r2, [r7, #64]	; 0x40
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	2b01      	cmp	r3, #1
 8006310:	d119      	bne.n	8006346 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	60bb      	str	r3, [r7, #8]
   return(result);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 0310 	bic.w	r3, r3, #16
 8006328:	647b      	str	r3, [r7, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006332:	61ba      	str	r2, [r7, #24]
 8006334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	613b      	str	r3, [r7, #16]
   return(result);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e5      	bne.n	8006312 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006354:	bf00      	nop
 8006356:	3754      	adds	r7, #84	; 0x54
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7fa fd09 	bl	8000d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b21      	cmp	r3, #33	; 0x21
 8006398:	d13e      	bne.n	8006418 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	d114      	bne.n	80063ce <UART_Transmit_IT+0x48>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d110      	bne.n	80063ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	1c9a      	adds	r2, r3, #2
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	621a      	str	r2, [r3, #32]
 80063cc:	e008      	b.n	80063e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6211      	str	r1, [r2, #32]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4619      	mov	r1, r3
 80063ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10f      	bne.n	8006414 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006402:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006412:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	e000      	b.n	800641a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006418:	2302      	movs	r3, #2
  }
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fce7 	bl	8005e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b22      	cmp	r3, #34	; 0x22
 8006466:	f040 80ae 	bne.w	80065c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	d117      	bne.n	80064a4 <UART_Receive_IT+0x50>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d113      	bne.n	80064a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006492:	b29a      	uxth	r2, r3
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
 80064a2:	e026      	b.n	80064f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	d007      	beq.n	80064c8 <UART_Receive_IT+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <UART_Receive_IT+0x82>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e008      	b.n	80064e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4619      	mov	r1, r3
 8006500:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006502:	2b00      	cmp	r3, #0
 8006504:	d15d      	bne.n	80065c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0220 	bic.w	r2, r2, #32
 8006514:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695a      	ldr	r2, [r3, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	2b01      	cmp	r3, #1
 800654a:	d135      	bne.n	80065b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	613b      	str	r3, [r7, #16]
   return(result);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f023 0310 	bic.w	r3, r3, #16
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	330c      	adds	r3, #12
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	623a      	str	r2, [r7, #32]
 8006574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	69f9      	ldr	r1, [r7, #28]
 8006578:	6a3a      	ldr	r2, [r7, #32]
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e5      	bne.n	8006552 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b10      	cmp	r3, #16
 8006592:	d10a      	bne.n	80065aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff fc4c 	bl	8005e4e <HAL_UARTEx_RxEventCallback>
 80065b6:	e002      	b.n	80065be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fa fc77 	bl	8000eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e002      	b.n	80065c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3730      	adds	r7, #48	; 0x30
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800660a:	f023 030c 	bic.w	r3, r3, #12
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	430b      	orrs	r3, r1
 8006616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <UART_SetConfig+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d103      	bne.n	8006640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fd ff6e 	bl	8004518 <HAL_RCC_GetPCLK2Freq>
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	e002      	b.n	8006646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fd ff56 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8006644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009a      	lsls	r2, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	4a22      	ldr	r2, [pc, #136]	; (80066e8 <UART_SetConfig+0x118>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	0119      	lsls	r1, r3, #4
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009a      	lsls	r2, r3, #2
 8006670:	441a      	add	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	fbb2 f2f3 	udiv	r2, r2, r3
 800667c:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <UART_SetConfig+0x118>)
 800667e:	fba3 0302 	umull	r0, r3, r3, r2
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	2064      	movs	r0, #100	; 0x64
 8006686:	fb00 f303 	mul.w	r3, r0, r3
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	3332      	adds	r3, #50	; 0x32
 8006690:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <UART_SetConfig+0x118>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800669c:	4419      	add	r1, r3
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009a      	lsls	r2, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <UART_SetConfig+0x118>)
 80066b6:	fba3 0302 	umull	r0, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2064      	movs	r0, #100	; 0x64
 80066be:	fb00 f303 	mul.w	r3, r0, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	3332      	adds	r3, #50	; 0x32
 80066c8:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <UART_SetConfig+0x118>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	440a      	add	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40013800 	.word	0x40013800
 80066e8:	51eb851f 	.word	0x51eb851f

080066ec <__libc_init_array>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	2600      	movs	r6, #0
 80066f0:	4d0c      	ldr	r5, [pc, #48]	; (8006724 <__libc_init_array+0x38>)
 80066f2:	4c0d      	ldr	r4, [pc, #52]	; (8006728 <__libc_init_array+0x3c>)
 80066f4:	1b64      	subs	r4, r4, r5
 80066f6:	10a4      	asrs	r4, r4, #2
 80066f8:	42a6      	cmp	r6, r4
 80066fa:	d109      	bne.n	8006710 <__libc_init_array+0x24>
 80066fc:	f000 f830 	bl	8006760 <_init>
 8006700:	2600      	movs	r6, #0
 8006702:	4d0a      	ldr	r5, [pc, #40]	; (800672c <__libc_init_array+0x40>)
 8006704:	4c0a      	ldr	r4, [pc, #40]	; (8006730 <__libc_init_array+0x44>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	42a6      	cmp	r6, r4
 800670c:	d105      	bne.n	800671a <__libc_init_array+0x2e>
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	f855 3b04 	ldr.w	r3, [r5], #4
 8006714:	4798      	blx	r3
 8006716:	3601      	adds	r6, #1
 8006718:	e7ee      	b.n	80066f8 <__libc_init_array+0xc>
 800671a:	f855 3b04 	ldr.w	r3, [r5], #4
 800671e:	4798      	blx	r3
 8006720:	3601      	adds	r6, #1
 8006722:	e7f2      	b.n	800670a <__libc_init_array+0x1e>
 8006724:	080067d8 	.word	0x080067d8
 8006728:	080067d8 	.word	0x080067d8
 800672c:	080067d8 	.word	0x080067d8
 8006730:	080067dc 	.word	0x080067dc

08006734 <memcpy>:
 8006734:	440a      	add	r2, r1
 8006736:	4291      	cmp	r1, r2
 8006738:	f100 33ff 	add.w	r3, r0, #4294967295
 800673c:	d100      	bne.n	8006740 <memcpy+0xc>
 800673e:	4770      	bx	lr
 8006740:	b510      	push	{r4, lr}
 8006742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006746:	4291      	cmp	r1, r2
 8006748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800674c:	d1f9      	bne.n	8006742 <memcpy+0xe>
 800674e:	bd10      	pop	{r4, pc}

08006750 <memset>:
 8006750:	4603      	mov	r3, r0
 8006752:	4402      	add	r2, r0
 8006754:	4293      	cmp	r3, r2
 8006756:	d100      	bne.n	800675a <memset+0xa>
 8006758:	4770      	bx	lr
 800675a:	f803 1b01 	strb.w	r1, [r3], #1
 800675e:	e7f9      	b.n	8006754 <memset+0x4>

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
